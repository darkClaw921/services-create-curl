#!/bin/bash

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã
WEBHOOK_DIR="/var/lib/webhook-automation"
CONFIG_FILE="${WEBHOOK_DIR}/config"
AUTOMATIONS_FILE="${WEBHOOK_DIR}/automations.list"
LOGS_DIR="${WEBHOOK_DIR}/logs"
WEBHOOK_LOG="${LOGS_DIR}/webhook.log"
SERVICES_LIST_FILE="/var/lib/service-creator/created_services.list"

# Webhook —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_PORT=9000
WEBHOOK_SECRET=""

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
init_webhook_system() {
  if [ ! -d "$WEBHOOK_DIR" ]; then
    mkdir -p "$WEBHOOK_DIR"
  fi
  
  if [ ! -d "$LOGS_DIR" ]; then
    mkdir -p "$LOGS_DIR"
  fi
  
  if [ ! -f "$CONFIG_FILE" ]; then
    cat > "$CONFIG_FILE" << EOF
WEBHOOK_PORT=9000
WEBHOOK_SECRET=""
NOTIFICATIONS_ENABLED=false
TELEGRAM_TOKEN=""
TELEGRAM_CHAT_ID=""
DEFAULT_BRANCH=master
EOF
  fi
  
  if [ ! -f "$AUTOMATIONS_FILE" ]; then
    touch "$AUTOMATIONS_FILE"
  fi
  
  if [ ! -f "$WEBHOOK_LOG" ]; then
    touch "$WEBHOOK_LOG"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π
  fix_automations_format
  
  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  source "$CONFIG_FILE"
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π (–º–∏–≥—Ä–∞—Ü–∏—è —Å : –Ω–∞ |)
fix_automations_format() {
  if [ -f "$AUTOMATIONS_FILE" ] && [ -s "$AUTOMATIONS_FILE" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ : –≤–º–µ—Å—Ç–æ |)
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: ID:name:url:path:branch:commands:date
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: ID|name|url|path|branch|commands|date|private|encrypted_creds
    
    local needs_migration=false
    local temp_file=$(mktemp)
    local migrated_count=0
    
    while IFS= read -r line; do
      # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if [ -z "$line" ]; then
        continue
      fi
      
      # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç | - —ç—Ç–æ —É–∂–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
      if [[ "$line" == *"|"* ]]; then
        echo "$line" >> "$temp_file"
        continue
      fi
      
      # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ : —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ - —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      if [[ "$line" == *":"* ]] && [[ "$line" != *"|"* ]]; then
        needs_migration=true
        
        # –ü–æ–ø—ã—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        # –ü—Ä–æ–±–ª–µ–º–∞: URL —Ç–∏–ø–∞ https://github.com —Å–æ–¥–µ—Ä–∂–∏—Ç :
        # –†–∞–∑–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        
        local id=""
        local name=""
        local url=""
        local path=""
        local branch=""
        local commands=""
        local date=""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ)
        id=$(echo "$line" | sed 's|^\([0-9]*\):.*|\1|')
        
        # –£–¥–∞–ª—è–µ–º ID –∏ : –∏–∑ –Ω–∞—á–∞–ª–∞
        local rest=$(echo "$line" | sed "s|^$id:||")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        if [ -z "$id" ] || [ -z "$rest" ]; then
          echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å: $line${NC}"
          continue
        fi
        
        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –∫–∞–∫ –ø—É—Å—Ç—ã–µ
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å | —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        local converted_line=$(echo "$rest" | sed 's|:||\|g')
        echo "${id}|${converted_line}||" >> "$temp_file"
        ((migrated_count++))
      else
        # –°—Ç—Ä–æ–∫–∞ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        echo "$line" >> "$temp_file"
      fi
    done < "$AUTOMATIONS_FILE"
    
    if [ "$needs_migration" = true ]; then
      echo -e "${YELLOW}üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π (: ‚Üí |)${NC}"
      mv "$temp_file" "$AUTOMATIONS_FILE"
      
      if [ "$migrated_count" -gt 0 ]; then
        echo -e "${GREEN}‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ $migrated_count –∑–∞–ø–∏—Å–µ–π.${NC}"
      fi
    else
      # –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      rm -f "$temp_file"
    fi
  fi
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
log_event() {
  local event_type="$1"
  local message="$2"
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  local ip_address=$(hostname -I | awk '{print $1}')
  
  echo "[$timestamp] [$event_type] [IP: $ip_address] $message" >> "$WEBHOOK_LOG"
  
  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  if [ "$NOTIFICATIONS_ENABLED" == "true" ] && [ ! -z "$TELEGRAM_CHAT_ID" ]; then
    send_notification "$event_type" "$message"
  fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
send_notification() {
  local event_type="$1"
  local message="$2"
  
  local emoji="üîÑ"
  case "$event_type" in
    "SUCCESS") emoji="‚úÖ" ;;
    "ERROR") emoji="‚ùå" ;;
    "WARNING") emoji="‚ö†Ô∏è" ;;
    "INFO") emoji="‚ÑπÔ∏è" ;;
  esac
  
  local ip_address=$(hostname -I | awk '{print $1}')
  local current_time=$(date "+%d-%m-%Y %H:%M:%S")
  
  local telegram_message="${emoji} <b>Webhook Automation</b>
<b>–¢–∏–ø:</b> ${event_type}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${message}
<b>–°–µ—Ä–≤–µ—Ä:</b> ${ip_address}
<b>–í—Ä–µ–º—è:</b> ${current_time}"
  
  if [ ! -z "$TELEGRAM_TOKEN" ] && [ ! -z "$TELEGRAM_CHAT_ID" ]; then
    curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
      -d chat_id="${TELEGRAM_CHAT_ID}" \
      -d text="${telegram_message}" \
      -d parse_mode="HTML" > /dev/null
  fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo –ø—Ä–∞–≤
check_sudo() {
  if [ "$(id -u)" -ne 0 ]; then
    echo -e "${RED}${BOLD}–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ sudo –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.${NC}"
    echo -e "${YELLOW}–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ sudo...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –ø–æ–ª—É—á–∏—Ç—å sudo –ø—Ä–∞–≤–∞
    if sudo -n true 2>/dev/null; then
      echo -e "${GREEN}–ü—Ä–∞–≤–∞ sudo –¥–æ—Å—Ç—É–ø–Ω—ã.${NC}"
    else
      echo -e "${YELLOW}–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ sudo...${NC}"
      if ! sudo true; then
        echo -e "${RED}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ sudo. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏...${NC}"
        sleep 2
        return 1
      fi
    fi
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å sudo –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [[ "${SKIP_SUDO_RESTART:-}" != "true" ]]; then
      echo -e "${GREEN}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –ø—Ä–∞–≤–∞–º–∏ sudo...${NC}"
      export SKIP_SUDO_RESTART=true
      exec sudo -E "$WEBHOOK_SCRIPT_PATH" "$@"
    fi
  fi
  
  return 0
}

# –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
clear_screen() {
  clear
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ service.sh
get_services_list() {
  local services=()
  
  if [ -f "$SERVICES_LIST_FILE" ]; then
    while IFS= read -r line; do
      service_info=(${line//:/ })
      service_name="${service_info[0]}"
      service_path="${service_info[1]}"
      services+=("$service_name:$service_path")
    done < "$SERVICES_LIST_FILE"
  fi
  
  echo "${services[@]}"
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
detect_git_repo() {
  local current_dir="$1"
  local repo_url=""
  local repo_name=""
  
  if [ -d "$current_dir/.git" ]; then
    # –ü–æ–ª—É—á–∞–µ–º remote URL
    repo_url=$(cd "$current_dir" && git remote get-url origin 2>/dev/null)
    
    if [ ! -z "$repo_url" ]; then
      # –û—á–∏—â–∞–µ–º URL –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –º—É—Å–æ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
      # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏ –ø—É—Ç—å –∏–∑ URL
      if [[ "$repo_url" =~ github\.com[/:]([^/]+)/([^/]+)(\.git)?$ ]]; then
        local user="${BASH_REMATCH[1]}"
        local repo="${BASH_REMATCH[2]%%.git}"
        clean_url="https://github.com/$user/$repo.git"
      elif [[ "$repo_url" =~ gitlab\.com[/:]([^/]+)/([^/]+)(\.git)?$ ]]; then
        local user="${BASH_REMATCH[1]}"
        local repo="${BASH_REMATCH[2]%%.git}"
        clean_url="https://gitlab.com/$user/$repo.git"
      else
        # –û–±—â–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
        clean_url=$(echo "$repo_url" | sed -E 's|https://[^@]*@([^@]*@)?|https://|g' | tr -cd '[:print:]')
      fi
      
      # –°–±—Ä–∞—Å—ã–≤–∞–µ–º git remote –∫ —á–∏—Å—Ç–æ–º—É URL, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
      if [ "$repo_url" != "$clean_url" ]; then
        reset_git_remote_url "$current_dir" "$clean_url"
      fi
      
      # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      repo_name=$(basename "$clean_url" .git)
      echo "$clean_url|$repo_name|$current_dir"
      return 0
    fi
  fi
  
  return 1
}

# –°–±—Ä–æ—Å Git remote URL –∫ —á–∏—Å—Ç–æ–º—É –≤–∏–¥—É (–±–µ–∑ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
reset_git_remote_url() {
  local repo_path="$1"
  local clean_url="$2"
  
  if [ -d "$repo_path/.git" ] && [ ! -z "$clean_url" ]; then
    log_event "DEBUG" "–°–±—Ä–æ—Å git remote URL –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $repo_path –∫ $clean_url"
    cd "$repo_path" && git remote set-url origin "$clean_url" 2>/dev/null
  fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
test_encryption_decryption() {
  local test_data="$1"
  
  echo "=== –¢–ï–°–¢ –®–ò–§–†–û–í–ê–ù–ò–Ø/–†–ê–°–®–ò–§–†–û–í–ö–ò ==="
  echo "–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '$test_data'"
  echo "–î–ª–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $(echo "$test_data" | wc -c) —Å–∏–º–≤–æ–ª–æ–≤"
  
  # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)
  local encrypted=$(echo "$test_data" | base64 | tr 'A-Za-z' 'N-ZA-Mn-za-m')
  echo "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '$encrypted'"
  echo "–î–ª–∏–Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $(echo "$encrypted" | wc -c) —Å–∏–º–≤–æ–ª–æ–≤"
  
  # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–∫–∞–∫ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)
  local decrypted=$(echo "$encrypted" | tr 'A-Za-z' 'N-ZA-Mn-za-m' | base64 -d 2>/dev/null)
  echo "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '$decrypted'"
  echo "–î–ª–∏–Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $(echo "$decrypted" | wc -c) —Å–∏–º–≤–æ–ª–æ–≤"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  if [ "$test_data" = "$decrypted" ]; then
    echo "‚úÖ –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
  else
    echo "‚ùå –û–®–ò–ë–ö–ê: –î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç"
    echo "–†–∞–∑–ª–∏—á–∏—è:"
    echo "  –ò—Å—Ö–æ–¥–Ω—ã–µ:       '$test_data'"
    echo "  –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ: '$decrypted'"
  fi
  echo "=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê ==="
}

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
diagnose_automation() {
  local automation_id="$1"
  
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}         –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò          ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  # –ò—â–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ —Ñ–∞–π–ª–µ
  local found=false
  while IFS='|' read -r id name repo path branch commands date is_private encrypted_creds; do
    if [ "$id" = "$automation_id" ]; then
      found=true
      
      echo -e "${YELLOW}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:${NC}"
      echo -e "  ID: $id"
      echo -e "  –ù–∞–∑–≤–∞–Ω–∏–µ: $name"
      echo -e "  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $repo"
      echo -e "  –ü—É—Ç—å: $path"
      echo -e "  –í–µ—Ç–∫–∞: $branch"
      echo -e "  –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: $is_private"
      echo -e "  –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $date"
      echo ""
      
      echo -e "${YELLOW}–ö–æ–º–∞–Ω–¥—ã:${NC}"
      echo -e "  $commands"
      echo ""
      
      if [ "$is_private" = "yes" ] && [ ! -z "$encrypted_creds" ]; then
        echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:${NC}"
        echo ""
        
        echo -e "${YELLOW}–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:${NC}"
        echo -e "  –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $encrypted_creds"
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        local method1=$(echo "$encrypted_creds" | tr 'A-Za-z' 'N-ZA-Mn-za-m' | base64 -d 2>/dev/null)
        local method2=$(echo "$encrypted_creds" | base64 -d 2>/dev/null | tr 'A-Za-z' 'N-ZA-Mn-za-m' 2>/dev/null)
        
        echo -e "  –ú–µ—Ç–æ–¥ 1 (ROT13 + base64): '$method1'"
        echo -e "  –ú–µ—Ç–æ–¥ 2 (base64 + ROT13): '$method2'"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if [[ "$method1" == *"darkClaw921:ghp_"* ]]; then
          echo -e "  ‚úÖ –ú–µ—Ç–æ–¥ 1 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        elif [[ "$method2" == *"darkClaw921:ghp_"* ]]; then
          echo -e "  ‚úÖ –ú–µ—Ç–æ–¥ 2 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
          echo -e "  ‚ùå –û–±–∞ –º–µ—Ç–æ–¥–∞ –¥–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        fi
      else
        echo -e "${YELLOW}–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π${NC}"
      fi
      
      echo ""
      echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:${NC}"
      if [ -d "$path" ]; then
        echo -e "  ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $path"
        if [ -d "$path/.git" ]; then
          echo -e "  ‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω"
          local current_url=$(cd "$path" && git remote get-url origin 2>/dev/null)
          echo -e "  –¢–µ–∫—É—â–∏–π remote URL: $current_url"
        else
          echo -e "  ‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
        fi
      else
        echo -e "  ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $path"
      fi
      
      break
    fi
  done < "$AUTOMATIONS_FILE"
  
  if [ "$found" = false ]; then
    echo -e "${RED}–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å ID $automation_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
  fi
  
  echo ""
  echo -n -e "${GREEN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
  read
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
repair_automation_credentials() {
  local automation_id="$1"
  
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}      –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –£–ß–ï–¢–ù–´–• –î–ê–ù–ù–´–•         ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GitHub:${NC}"
  echo -n -e "${GREEN}Username: ${NC}"
  read username
  
  echo -n -e "${GREEN}Personal Access Token: ${NC}"
  read -s token
  echo ""
  
  if [ -z "$username" ] || [ -z "$token" ]; then
    echo -e "${RED}–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!${NC}"
    return 1
  fi
  
  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  local git_credentials="$username:$token"
  
  # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  local encrypted_credentials=$(echo "$git_credentials" | base64 | tr 'A-Za-z' 'N-ZA-Mn-za-m')
  
  echo ""
  echo -e "${CYAN}–¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É...${NC}"
  test_encryption_decryption "$git_credentials"
  
  echo ""
  echo -e "${YELLOW}–û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é...${NC}"
  
  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  local temp_file=$(mktemp)
  local updated=false
  
  while IFS='|' read -r id name repo path branch commands date is_private old_encrypted_creds; do
    if [ "$id" = "$automation_id" ]; then
      # –ó–∞–º–µ–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–æ–≤—ã–µ
      echo "$id|$name|$repo|$path|$branch|$commands|$date|yes|$encrypted_credentials" >> "$temp_file"
      updated=true
      log_event "INFO" "–û–±–Ω–æ–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$name' (ID: $id)"
    else
      # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
      echo "$id|$name|$repo|$path|$branch|$commands|$date|$is_private|$old_encrypted_creds" >> "$temp_file"
    fi
  done < "$AUTOMATIONS_FILE"
  
  if [ "$updated" = true ]; then
    mv "$temp_file" "$AUTOMATIONS_FILE"
    echo -e "${GREEN}‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!${NC}"
  else
    rm -f "$temp_file"
    echo -e "${RED}‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å ID $automation_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
  fi
  
  echo ""
  echo -n -e "${GREEN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
  read
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö URL –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è—Ö
repair_automation_urls() {
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}       –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï URL –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ô        ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  cp "$AUTOMATIONS_FILE" "${AUTOMATIONS_FILE}.backup.$(date +%s)"
  echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${AUTOMATIONS_FILE}.backup.$(date +%s)${NC}"
  
  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  local temp_file=$(mktemp)
  local fixed_count=0
  
  while IFS='|' read -r id name repo path branch commands date is_private encrypted_creds; do
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –≤ –ø–æ–ª–µ repo
    local fixed_repo=$(echo "$repo" | sed -E 's|/KUZKO-LTD/tg-manager\.git||g')
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
    local fixed_commands=$(echo "$commands" | sed -E 's|https://[^@[:space:]'"'"'"]+@github\.com/KUZKO-LTD/tg-manager\.git/KUZKO-LTD/tg-manager\.git|https://github.com/KUZKO-LTD/tg-manager.git|g')
    fixed_commands=$(echo "$fixed_commands" | sed -E 's|/KUZKO-LTD/tg-manager\.git||g')
    
    if [ "$repo" != "$fixed_repo" ] || [ "$commands" != "$fixed_commands" ]; then
      ((fixed_count++))
      echo -e "${GREEN}–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: $name${NC}"
      log_event "INFO" "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$name' (ID: $id)"
    fi
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    echo "$id|$name|$fixed_repo|$path|$branch|$fixed_commands|$date|$is_private|$encrypted_creds" >> "$temp_file"
    
  done < "$AUTOMATIONS_FILE"
  
  if [ "$fixed_count" -gt 0 ]; then
    mv "$temp_file" "$AUTOMATIONS_FILE"
    echo -e "${GREEN}‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ $fixed_count –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π!${NC}"
  else
    rm -f "$temp_file"
    echo -e "${YELLOW}–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.${NC}"
  fi
  
  echo ""
  echo -n -e "${GREEN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
  read
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏ Git
get_current_branch() {
  local dir="$1"
  if [ -d "$dir/.git" ]; then
    cd "$dir" && git branch --show-current 2>/dev/null
  fi
}

# –ü–æ–∏—Å–∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
find_git_repos() {
  local repos=()
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  if git_info=$(detect_git_repo "$(pwd)"); then
    repos+=("$git_info")
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  if [ -f "$SERVICES_LIST_FILE" ]; then
    while IFS= read -r line; do
      service_info=(${line//:/ })
      service_path="${service_info[1]}"
      
      if [ -d "$service_path" ]; then
        if git_info=$(detect_git_repo "$service_path"); then
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
          local already_exists=false
          for existing_repo in "${repos[@]}"; do
            if [[ "$existing_repo" == "$git_info" ]]; then
              already_exists=true
              break
            fi
          done
          
          if [ "$already_exists" = false ]; then
            repos+=("$git_info")
          fi
        fi
      fi
    done < "$SERVICES_LIST_FILE"
  fi
  
  echo "${repos[@]}"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
suggest_automation_name() {
  local repo_name="$1"
  local branch="$2"
  local service_name="$3"
  
  if [ ! -z "$service_name" ]; then
    echo "Deploy $service_name on $branch push"
  else
    echo "Auto-deploy $repo_name from $branch"
  fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
create_automation() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}         –°–û–ó–î–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò              ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  # –ü–æ–∏—Å–∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
  repos=($(find_git_repos))
  
  local repo_url=""
  local project_path=""
  local repo_name=""
  local current_branch=""
  
  if [ ${#repos[@]} -gt 0 ]; then
    echo -e "${YELLOW}üîç –ù–∞–π–¥–µ–Ω—ã Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:${NC}"
    echo -e "${YELLOW}---------------------------------------------${NC}"
    
    for i in "${!repos[@]}"; do
      repo_info=(${repos[$i]//|/ })
      local url="${repo_info[0]}"
      local name="${repo_info[1]}"
      local path="${repo_info[2]}"
      local branch=$(get_current_branch "$path")
      
      echo -e "${CYAN}$((i+1)).${NC} ${BOLD}$name${NC} (–≤–µ—Ç–∫–∞: ${GREEN}$branch${NC})"
      echo -e "   ${YELLOW}URL:${NC} $url"
      echo -e "   ${YELLOW}–ü—É—Ç—å:${NC} $path"
      echo -e "${YELLOW}---------------------------------------------${NC}"
    done
    
    echo -e "${CYAN}$((${#repos[@]}+1)).${NC} –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"
    echo ""
    echo -e "${GREEN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:${NC} –í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-$((${#repos[@]}+1))): ${NC}"
    read repo_choice
    
    if [[ "$repo_choice" =~ ^[0-9]+$ ]] && [ "$repo_choice" -ge 1 ] && [ "$repo_choice" -le ${#repos[@]} ]; then
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      repo_info=(${repos[$((repo_choice-1))]//|/ })
      repo_url="${repo_info[0]}"
      repo_name="${repo_info[1]}"
      project_path="${repo_info[2]}"
      current_branch=$(get_current_branch "$project_path")
      
      echo ""
      echo -e "${GREEN}‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:${NC} ${BOLD}$repo_name${NC}"
      echo -e "${GREEN}üìÅ –ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:${NC} $project_path"
      echo -e "${GREEN}üåø –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:${NC} $current_branch"
    fi
  fi
  
  # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
  if [ -z "$repo_url" ]; then
    echo ""
    echo -e "${YELLOW}üìã –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:${NC}"
    echo -e "${YELLOW}---------------------------------------------${NC}"
    
    echo -e "${BLUE}–ü—Ä–∏–º–µ—Ä—ã URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:${NC}"
    echo -e "  ‚Ä¢ https://github.com/username/project.git"
    echo -e "  ‚Ä¢ git@github.com:username/project.git"
    echo -e "  ‚Ä¢ https://gitlab.com/username/project.git"
    echo ""
    echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ URL Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${NC}"
    read repo_url
    
    if [ -z "$repo_url" ]; then
      echo -e "${RED}‚ùå URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!${NC}"
      sleep 2
      return 1
    fi
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_name=$(basename "$repo_url" .git)
    
    echo ""
    echo -e "${BLUE}–ü—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π –∫ –ø—Ä–æ–µ–∫—Ç—É:${NC}"
    echo -e "  ‚Ä¢ /var/www/$repo_name"
    echo -e "  ‚Ä¢ /home/user/projects/$repo_name"
    echo -e "  ‚Ä¢ $(pwd)/$repo_name"
    echo ""
    echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ [$(pwd)/$repo_name]: ${NC}"
    read input_path
    
    if [ -z "$input_path" ]; then
      project_path="$(pwd)/$repo_name"
    else
      project_path="$input_path"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ -d "$project_path" ]; then
      current_branch=$(get_current_branch "$project_path")
    fi
  fi
  
  # –í—ã–±–æ—Ä –≤–µ—Ç–∫–∏ —Å —É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  echo ""
  echo -e "${YELLOW}üåø –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Ç–∫–∏:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  
  if [ ! -z "$current_branch" ]; then
    echo -e "${BLUE}–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:${NC} ${GREEN}$current_branch${NC}"
    echo -e "${BLUE}–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC} main, master, develop, staging"
    echo ""
    echo -n -e "${GREEN}–í–µ—Ç–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è [${current_branch}]: ${NC}"
    read target_branch
    
    if [ -z "$target_branch" ]; then
      target_branch="$current_branch"
    fi
  else
    echo -e "${BLUE}–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC} main, master, develop, staging"
    echo ""
    echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è [main]: ${NC}"
    read target_branch
    
    if [ -z "$target_branch" ]; then
      target_branch="main"
    fi
  fi
  
  # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
  services=($(get_services_list))
  matching_services=()
  
  if [ ${#services[@]} -gt 0 ]; then
    for service in "${services[@]}"; do
      service_info=(${service//:/ })
      service_path="${service_info[1]}"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—É—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–æ–µ–∫—Ç–æ–º
      if [[ "$service_path" == "$project_path"* ]] || [[ "$project_path" == "$service_path"* ]]; then
        matching_services+=("$service")
      fi
    done
  fi
  
  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
  local suggested_service=""
  if [ ${#matching_services[@]} -gt 0 ]; then
    service_info=(${matching_services[0]//:/ })
    suggested_service="${service_info[0]}"
  fi
  
  local suggested_name=$(suggest_automation_name "$repo_name" "$target_branch" "$suggested_service")
  
  echo ""
  echo -e "${YELLOW}üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo -e "${BLUE}–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:${NC} $suggested_name"
  echo ""
  echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ [$suggested_name]: ${NC}"
  read automation_name
  
  if [ -z "$automation_name" ]; then
    automation_name="$suggested_name"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  echo ""
  echo -e "${YELLOW}üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  
  local git_credentials=""
  local is_private=""
  
  echo -e "${BLUE}–¢–∏–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:${NC}"
  echo -e "${CYAN}1.${NC} –ü—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"
  echo -e "${CYAN}2.${NC} –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ç–æ–∫–µ–Ω)"
  echo ""
  echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-2) [1]: ${NC}"
  read repo_type
  
  if [ "$repo_type" = "2" ]; then
    is_private="yes"
    echo ""
    echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:${NC}"
    echo -e "${YELLOW}---------------------------------------------${NC}"
    echo -e "${BLUE}–°–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:${NC}"
    echo -e "${CYAN}1.${NC} Username + Password"
    echo -e "${CYAN}2.${NC} Username + Personal Access Token (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo ""
    echo -n -e "${GREEN}–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± (1-2) [2]: ${NC}"
    read auth_method
    
    echo ""
    echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ GitHub/GitLab username: ${NC}"
    read git_username
    
    if [ "$auth_method" = "1" ]; then
      echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ${NC}"
      read -s git_password
      echo ""
      git_credentials="$git_username:$git_password"
    else
      echo ""
      echo -e "${BLUE}üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Personal Access Token:${NC}"
      echo -e "  GitHub: Settings ‚Üí Developer settings ‚Üí Personal access tokens ‚Üí Generate new token"
      echo -e "  GitLab: User Settings ‚Üí Access Tokens ‚Üí Create personal access token"
      echo -e "  –ü—Ä–∞–≤–∞: repo (–¥–ª—è GitHub) –∏–ª–∏ read_repository + write_repository (–¥–ª—è GitLab)"
      echo ""
      echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ Personal Access Token: ${NC}"
      read -s git_token
      echo ""
      git_credentials="$git_username:$git_token"
    fi
    
    echo ""
    echo -e "${GREEN}‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${BOLD}$git_username${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ${NC}"
  else
    echo -e "${GREEN}‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è${NC}"
  fi
  
  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
  echo ""
  echo -e "${YELLOW}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  
  local commands=""
  
  if [ ${#matching_services[@]} -gt 0 ]; then
    echo -e "${GREEN}üéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
    
    for i in "${!matching_services[@]}"; do
      service_info=(${matching_services[$i]//:/ })
      service_name="${service_info[0]}"
      service_path="${service_info[1]}"
      
      echo -e "${CYAN}$((i+1)).${NC} ${BOLD}$service_name${NC} (${service_path})"
    done
    
    echo -e "${CYAN}$((${#matching_services[@]}+1)).${NC} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å"
    echo -e "${CYAN}$((${#matching_services[@]}+2)).${NC} –£–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é"
    echo ""
    echo -e "${GREEN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:${NC} –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
    echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-$((${#matching_services[@]}+2))): ${NC}"
    read action_choice
    
    if [[ "$action_choice" =~ ^[0-9]+$ ]] && [ "$action_choice" -ge 1 ] && [ "$action_choice" -le ${#matching_services[@]} ]; then
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–∏—Å
      service_info=(${matching_services[$((action_choice-1))]//:/ })
      service_name="${service_info[0]}"
      
      if [ ! -z "$git_credentials" ]; then
        # –°–æ–∑–¥–∞–µ–º URL —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        local auth_url=$(echo "$repo_url" | sed "s|https://|https://$git_credentials@|")
        commands="cd $project_path && git remote set-url origin '$auth_url' && git pull origin $target_branch && systemctl restart $service_name"
      else
        commands="cd $project_path && git pull origin $target_branch && systemctl restart $service_name"
      fi
      
      echo ""
      echo -e "${GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º:${NC} ${BOLD}$service_name${NC}"
      echo -e "${BLUE}–ö–æ–º–∞–Ω–¥—ã:${NC} $commands"
      
    elif [ "$action_choice" -eq $((${#matching_services[@]}+1)) ]; then
      # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      if [ ${#services[@]} -gt 0 ]; then
        echo ""
        echo -e "${YELLOW}–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"
        for i in "${!services[@]}"; do
          service_info=(${services[$i]//:/ })
          service_name="${service_info[0]}"
          echo -e "${CYAN}$((i+1)).${NC} $service_name"
        done
        
        echo ""
        echo -n -e "${GREEN}–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞: ${NC}"
        read service_choice
        
        if [[ "$service_choice" =~ ^[0-9]+$ ]] && [ "$service_choice" -ge 1 ] && [ "$service_choice" -le ${#services[@]} ]; then
          selected_service=(${services[$((service_choice-1))]//:/ })
          service_name="${selected_service[0]}"
          
          if [ ! -z "$git_credentials" ]; then
            # –°–æ–∑–¥–∞–µ–º URL —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            local auth_url=$(echo "$repo_url" | sed "s|https://|https://$git_credentials@|")
            commands="cd $project_path && git remote set-url origin '$auth_url' && git pull origin $target_branch && systemctl restart $service_name"
          else
            commands="cd $project_path && git pull origin $target_branch && systemctl restart $service_name"
          fi
        fi
      fi
    fi
  else
    # –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if [ ${#services[@]} -gt 0 ]; then
      echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"
      for i in "${!services[@]}"; do
        service_info=(${services[$i]//:/ })
        service_name="${service_info[0]}"
        echo -e "${CYAN}$((i+1)).${NC} $service_name"
      done
      
      echo -e "${CYAN}$((${#services[@]}+1)).${NC} –£–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é"
      echo ""
      echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-$((${#services[@]}+1))): ${NC}"
      read action_choice
      
      if [[ "$action_choice" =~ ^[0-9]+$ ]] && [ "$action_choice" -ge 1 ] && [ "$action_choice" -le ${#services[@]} ]; then
        selected_service=(${services[$((action_choice-1))]//:/ })
        service_name="${selected_service[0]}"
        
        if [ ! -z "$git_credentials" ]; then
          # –°–æ–∑–¥–∞–µ–º URL —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          local auth_url=$(echo "$repo_url" | sed "s|https://|https://$git_credentials@|")
          commands="cd $project_path && git pull origin '$auth_url' && systemctl restart $service_name"
        else
          commands="cd $project_path && git pull origin $target_branch && systemctl restart $service_name"
        fi
      fi
    fi
  fi
  
  # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–∏—Å
  if [ -z "$commands" ]; then
    echo ""
    echo -e "${YELLOW}üîß –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥:${NC}"
    echo -e "${YELLOW}---------------------------------------------${NC}"
    echo -e "${BLUE}–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:${NC}"
    echo -e "  ‚Ä¢ ${GREEN}git pull && npm install && npm run build && pm2 restart app${NC}"
    echo -e "  ‚Ä¢ ${GREEN}git pull && pip install -r requirements.txt && systemctl restart myapp${NC}"
    echo -e "  ‚Ä¢ ${GREEN}git pull && docker-compose down && docker-compose up -d${NC}"
    echo -e "  ‚Ä¢ ${GREEN}git pull && ./deploy.sh${NC}"
    echo ""
    if [ ! -z "$git_credentials" ]; then
      echo -e "${YELLOW}–ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞: ${GREEN}cd $project_path && git pull (—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)${NC}"
    else
      echo -e "${YELLOW}–ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞: ${GREEN}cd $project_path && git pull origin $target_branch${NC}"
    fi
    echo -n -e "${GREEN}–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ git pull: ${NC}"
    read additional_commands
    
    if [ ! -z "$git_credentials" ]; then
      # –°–æ–∑–¥–∞–µ–º URL —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      local auth_url=$(echo "$repo_url" | sed "s|https://|https://$git_credentials@|")
      if [ -z "$additional_commands" ]; then
        commands="cd $project_path && git remote set-url origin '$auth_url' && git pull origin $target_branch"
      else
        commands="cd $project_path && git remote set-url origin '$auth_url' && git pull origin $target_branch && $additional_commands"
      fi
    else
      if [ -z "$additional_commands" ]; then
        commands="cd $project_path && git pull origin $target_branch"
      else
        commands="cd $project_path && git pull origin $target_branch && $additional_commands"
      fi
    fi
  fi
  
  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
  echo ""
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}           –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø            ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  echo -e "${YELLOW}–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo -e "${BOLD}üìù –ù–∞–∑–≤–∞–Ω–∏–µ:${NC} $automation_name"
  echo -e "${BOLD}üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:${NC} $repo_url"
  echo -e "${BOLD}üìÅ –ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:${NC} $project_path"
  echo -e "${BOLD}üåø –í–µ—Ç–∫–∞:${NC} $target_branch"
  echo -e "${BOLD}‚öôÔ∏è  –ö–æ–º–∞–Ω–¥—ã:${NC} $commands"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo ""
  echo -n -e "${GREEN}–°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é? [Y/n]: ${NC}"
  read confirm
  
  if [[ "$confirm" == "n" || "$confirm" == "N" ]]; then
    echo -e "${YELLOW}‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.${NC}"
    sleep 2
    return 1
  fi
  
  # –ó–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
  local encrypted_credentials=""
  if [ ! -z "$git_credentials" ]; then
    # –ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (base64 + rot13)
    encrypted_credentials=$(echo "$git_credentials" | base64 | tr 'A-Za-z' 'N-ZA-Mn-za-m')
  fi
  
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  local automation_id=$(date +%s)
  echo "${automation_id}|${automation_name}|${repo_url}|${project_path}|${target_branch}|${commands}|$(date '+%Y-%m-%d %H:%M:%S')|${is_private}|${encrypted_credentials}" >> "$AUTOMATIONS_FILE"
  
  echo ""
  echo -e "${GREEN}${BOLD}‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è '$automation_name' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!${NC}"
  echo ""
  echo -e "${YELLOW}üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
  echo -e "1. ${CYAN}–ó–∞–ø—É—Å—Ç–∏—Ç–µ webhook —Å–µ—Ä–≤–µ—Ä${NC} (–ø—É–Ω–∫—Ç 3 –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)"
  echo -e "2. ${CYAN}–ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub webhook${NC}:"
  echo -e "   ‚Ä¢ ${YELLOW}URL:${NC} ${GREEN}http://$(hostname -I | awk '{print $1}'):$WEBHOOK_PORT/webhook${NC}"
  echo -e "   ‚Ä¢ ${YELLOW}Content type:${NC} application/json"
  echo -e "   ‚Ä¢ ${YELLOW}Events:${NC} Just the push event"
  echo -e "3. ${CYAN}–°–¥–µ–ª–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç${NC} –≤ –≤–µ—Ç–∫—É $target_branch"
  echo -e "4. ${CYAN}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏${NC} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
  
  log_event "INFO" "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: $automation_name –¥–ª—è –≤–µ—Ç–∫–∏ $target_branch"
  
  sleep 5
  return 0
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è–º–∏
manage_automations() {
  while true; do
    clear_screen
    echo -e "${BOLD}${CYAN}==============================================${NC}"
    echo -e "${BOLD}${CYAN}        –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø–ú–ò           ${NC}"
    echo -e "${BOLD}${CYAN}==============================================${NC}"
    echo ""
    
    if [ ! -s "$AUTOMATIONS_FILE" ]; then
      echo -e "${RED}–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç.${NC}"
      sleep 2
      return 1
    fi
    
    echo -e "${YELLOW}–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π:${NC}"
    echo -e "${YELLOW}---------------------------------------------${NC}"
    
    mapfile -t automations < "$AUTOMATIONS_FILE"
    
    for i in "${!automations[@]}"; do
      local IFS='|'
      read -ra automation_info <<< "${automations[$i]}"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if [ ${#automation_info[@]} -lt 6 ]; then
        echo -e "${RED}‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å: ${automations[$i]::50}...${NC}"
        continue
      fi
      
      automation_id="${automation_info[0]}"
      automation_name="${automation_info[1]}"
      repo_url="${automation_info[2]}"
      target_branch="${automation_info[4]}"
      creation_date="${automation_info[6]} ${automation_info[7]}"
      
      echo -e "${CYAN}$((i+1)).${NC} ${BOLD}$automation_name${NC}"
      echo -e "   ${YELLOW}–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:${NC} $repo_url"
      echo -e "   ${YELLOW}–í–µ—Ç–∫–∞:${NC} $target_branch"
      echo -e "   ${YELLOW}–°–æ–∑–¥–∞–Ω–∞:${NC} $creation_date"
      echo -e "${YELLOW}---------------------------------------------${NC}"
    done
    
    echo ""
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo -e "${CYAN}1.${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
    echo -e "${CYAN}2.${NC} –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"
    echo -e "${CYAN}3.${NC} –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"
    echo -e "${PURPLE}4.${NC} üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
    echo -e "${PURPLE}5.${NC} üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    echo -e "${CYAN}6.${NC} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    echo ""
    echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-6): ${NC}"
    read action_choice
    
    case $action_choice in
      1|2|3|4|5)
        echo ""
        echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${NC}"
        read automation_number
        
        if ! [[ "$automation_number" =~ ^[0-9]+$ ]] || [ "$automation_number" -lt 1 ] || [ "$automation_number" -gt ${#automations[@]} ]; then
          echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
          sleep 2
          continue
        fi
        
        selected_automation="${automations[$((automation_number-1))]}"
        automation_info=(${selected_automation//|/ })
        
        case $action_choice in
          1)
            view_automation_details "$selected_automation"
            ;;
          2)
            delete_automation "$automation_number" "${automation_info[1]}"
            ;;
          3)
            test_automation "$selected_automation"
            ;;
          4)
            diagnose_automation "${automation_info[0]}"
            ;;
          5)
            repair_automation_credentials "${automation_info[0]}"
            ;;
        esac
        ;;
      6)
        return 0
        ;;
      *)
        echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
        sleep 1
        ;;
    esac
  done
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
view_automation_details() {
  local automation_data="$1"
  
  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  local IFS='|'
  read -ra automation_info <<< "$automation_data"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
  if [ ${#automation_info[@]} -lt 6 ]; then
    echo -e "${RED}‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!${NC}"
    echo -e "${YELLOW}–î–∞–Ω–Ω—ã–µ: $automation_data${NC}"
    echo ""
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...${NC}"
    read
    return 1
  fi
  
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}       –î–ï–¢–ê–õ–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò                  ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  echo -e "${YELLOW}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo -e "${BOLD}ID:${NC} ${automation_info[0]:-'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
  echo -e "${BOLD}–ù–∞–∑–≤–∞–Ω–∏–µ:${NC} ${automation_info[1]:-'–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
  echo -e "${BOLD}–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:${NC} ${automation_info[2]:-'–ù–µ —É–∫–∞–∑–∞–Ω'}"
  echo -e "${BOLD}–ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:${NC} ${automation_info[3]:-'–ù–µ —É–∫–∞–∑–∞–Ω'}"
  echo -e "${BOLD}–í–µ—Ç–∫–∞:${NC} ${automation_info[4]:-'–ù–µ —É–∫–∞–∑–∞–Ω–∞'}"
  echo -e "${BOLD}–ö–æ–º–∞–Ω–¥—ã:${NC} ${automation_info[5]:-'–ù–µ —É–∫–∞–∑–∞–Ω—ã'}"
  echo -e "${BOLD}–°–æ–∑–¥–∞–Ω–∞:${NC} ${automation_info[6]:-''}"
  
  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  if [ ! -z "${automation_info[7]}" ] && [ "${automation_info[7]}" = "yes" ]; then
    echo -e "${BOLD}–¢–∏–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:${NC} ${YELLOW}üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π (—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)${NC}"
  else
    echo -e "${BOLD}–¢–∏–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:${NC} ${GREEN}üåê –ü—É–±–ª–∏—á–Ω—ã–π${NC}"
  fi
  echo -e "${YELLOW}---------------------------------------------${NC}"
  
  echo ""
  echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...${NC}"
  read
}

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
delete_automation() {
  local automation_number="$1"
  local automation_name="$2"
  
  echo ""
  echo -e "${RED}${BOLD}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é '$automation_name'? (y/n): ${NC}"
  read confirm_delete
  
  if [[ "$confirm_delete" == "y" || "$confirm_delete" == "Y" ]]; then
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    sed -i "${automation_number}d" "$AUTOMATIONS_FILE"
    
    echo -e "${GREEN}${BOLD}–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è '$automation_name' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.${NC}"
    log_event "INFO" "–£–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: $automation_name"
    sleep 2
  else
    echo -e "${YELLOW}–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.${NC}"
    sleep 1
  fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
test_automation() {
  local automation_data="$1"
  
  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ IFS
  local IFS='|'
  read -ra automation_info <<< "$automation_data"
  
  local automation_id="${automation_info[0]:-}"
  local automation_name="${automation_info[1]:-}"
  local automation_repo="${automation_info[2]:-}"
  local automation_path="${automation_info[3]:-}"
  local automation_branch="${automation_info[4]:-}"
  local commands="${automation_info[5]:-}"
  local automation_created="${automation_info[6]:-}"
  local automation_is_private="${automation_info[7]:-}"
  local automation_encrypted_creds="${automation_info[8]:-}"
  
  echo ""
  echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$automation_name'...${NC}"
  echo -e "${CYAN}–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $automation_repo${NC}"
  echo -e "${CYAN}–í–µ—Ç–∫–∞: $automation_branch${NC}"
  echo -e "${CYAN}–ü—É—Ç—å: $automation_path${NC}"
  
  log_event "INFO" "üß™ –ù–∞—á–∞—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: $automation_name"
  log_event "DEBUG" "üìã –î–µ—Ç–∞–ª–∏: repo='$automation_repo', branch='$automation_branch', path='$automation_path'"
  log_event "DEBUG" "üîê –¢–∏–ø: $([ "$automation_is_private" = "yes" ] && echo "–ø—Ä–∏–≤–∞—Ç–Ω—ã–π" || echo "–ø—É–±–ª–∏—á–Ω—ã–π") —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
  
  # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
  local final_commands="$commands"
  if [ "$automation_is_private" = "yes" ] && [ ! -z "$automation_encrypted_creds" ]; then
    log_event "DEBUG" "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    local decrypted_creds=$(echo "$automation_encrypted_creds" | tr 'A-Za-z' 'N-ZA-Mn-za-m' | base64 -d 2>/dev/null)
    if [ ! -z "$decrypted_creds" ]; then
      log_event "DEBUG" "‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
      # –ó–∞–º–µ–Ω—è–µ–º git pull –Ω–∞ git pull —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
      local auth_url=$(echo "$automation_repo" | sed "s|https://|https://$decrypted_creds@|")
      final_commands=$(echo "$commands" | sed "s|git pull origin|git remote set-url origin '$auth_url' \&\& git pull origin|g")
      log_event "DEBUG" "üîß –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    else
      log_event "ERROR" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    fi
  fi
  
  log_event "DEBUG" "üíª –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $final_commands"
  echo -e "${CYAN}–í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
  echo -e "${GRAY}$final_commands${NC}"
  echo ""
  
  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
  if eval "$final_commands"; then
    echo -e "${GREEN}${BOLD}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"
    log_event "SUCCESS" "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$automation_name' –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
  else
    echo -e "${RED}${BOLD}–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥!${NC}"
    log_event "ERROR" "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$automation_name'"
  fi
  
  echo ""
  echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...${NC}"
  read
}

# –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
start_webhook_server() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}           WEBHOOK –°–ï–†–í–ï–†                    ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
  local server_running=false
  local server_type_running=""
  
  if pgrep -f "python3.*webhook_server.*${WEBHOOK_PORT}" > /dev/null; then
    server_running=true
    server_type_running="Python"
  elif pgrep -f "socat.*${WEBHOOK_PORT}" > /dev/null; then
    server_running=true
    server_type_running="Socat"
  elif pgrep -f "nc.*${WEBHOOK_PORT}" > /dev/null; then
    server_running=true
    server_type_running="Netcat"
  fi
  
  if [ "$server_running" = true ]; then
    echo -e "${YELLOW}Webhook —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω (${GREEN}$server_type_running${YELLOW}).${NC}"
    echo -e "${YELLOW}–ü–æ—Ä—Ç: ${GREEN}$WEBHOOK_PORT${NC}"
    echo ""
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo -e "${CYAN}1.${NC} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo -e "${CYAN}2.${NC} –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo -e "${CYAN}3.${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
    echo -e "${CYAN}4.${NC} –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo -e "${CYAN}5.${NC} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    echo ""
    echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-5): ${NC}"
    read server_action
    
    case $server_action in
      1)
        echo -e "${YELLOW}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã webhook —Å–µ—Ä–≤–µ—Ä–æ–≤
        pkill -f "python3.*webhook_server_${WEBHOOK_PORT}" 2>/dev/null
        pkill -f "socat.*${WEBHOOK_PORT}" 2>/dev/null
        pkill -f "nc.*-p ${WEBHOOK_PORT}" 2>/dev/null
        pkill -f "nc.*-l.*${WEBHOOK_PORT}" 2>/dev/null
        sleep 2
        echo -e "${GREEN}‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
        log_event "INFO" "Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        echo ""
        echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...${NC}"
        read
        ;;
      2)
        echo -e "${YELLOW}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã webhook —Å–µ—Ä–≤–µ—Ä–æ–≤
        pkill -f "python3.*webhook_server_${WEBHOOK_PORT}" 2>/dev/null
        pkill -f "socat.*${WEBHOOK_PORT}" 2>/dev/null
        pkill -f "nc.*-p ${WEBHOOK_PORT}" 2>/dev/null
        pkill -f "nc.*-l.*${WEBHOOK_PORT}" 2>/dev/null
        sleep 2
        echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:${NC}"
        echo -e "${CYAN}1.${NC} Python —Å–µ—Ä–≤–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
        echo -e "${CYAN}2.${NC} Bash —Å–µ—Ä–≤–µ—Ä"
        echo ""
        echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-2): ${NC}"
        read restart_choice
        
        case $restart_choice in
          1) start_python_webhook_server ;;
          *) start_bash_webhook_server ;;
        esac
        ;;
      3)
        show_detailed_server_status
        ;;
      4)
        test_webhook_server
        ;;
      5)
        return
        ;;
      *)
        echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
        sleep 1
        ;;
    esac
  else
    echo -e "${YELLOW}Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.${NC}"
    echo ""
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo -e "${CYAN}1.${NC} –ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Å–µ—Ä–≤–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo -e "${CYAN}2.${NC} –ó–∞–ø—É—Å—Ç–∏—Ç—å Bash —Å–µ—Ä–≤–µ—Ä"
    echo -e "${CYAN}3.${NC} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ webhook –ø—Ä–æ—Ü–µ—Å—Å—ã (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)"
    echo -e "${CYAN}4.${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo -e "${CYAN}5.${NC} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    echo ""
    echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-5): ${NC}"
    read server_type
    
    case $server_type in
      1)
        start_python_webhook_server
        ;;
      2)
        start_bash_webhook_server
        ;;
      3)
        echo -e "${YELLOW}–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö webhook –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...${NC}"
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ webhook –ø—Ä–æ—Ü–µ—Å—Å—ã
        pkill -f "python3.*webhook_server" 2>/dev/null
        pkill -f "socat.*${WEBHOOK_PORT}" 2>/dev/null
        pkill -f "nc.*${WEBHOOK_PORT}" 2>/dev/null
        pkill -f "webhook" 2>/dev/null
        echo -e "${GREEN}‚úÖ –í—Å–µ webhook –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.${NC}"
        log_event "INFO" "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö webhook –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        echo ""
        echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...${NC}"
        read
        ;;
      4)
        show_detailed_server_status
        ;;
      5)
        return
        ;;
      *)
        echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É—é Python —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...${NC}"
        start_python_webhook_server
        ;;
    esac
  fi
  
  sleep 3
}

# –°–æ–∑–¥–∞–Ω–∏–µ Python webhook —Å–µ—Ä–≤–µ—Ä–∞
create_python_webhook_server() {
  local script_path="/tmp/webhook_server_${WEBHOOK_PORT}.py"
  
  cat > "$script_path" << 'PYTHON_SERVER_EOF'
#!/usr/bin/env python3
import http.server
import socketserver
import json
import sys
import subprocess
import os
from datetime import datetime

class WebhookHandler(http.server.BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = format % args
        log_file = "/var/lib/webhook-automation/logs/webhook.log"
        try:
            with open(log_file, "a") as f:
                f.write(f"[{timestamp}] [PYTHON-SERVER] {message}\n")
        except:
            pass
    
    def do_GET(self):
        if self.path == "/webhook":
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Webhook server is active")
            self.log_message("GET request to /webhook")
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Not Found")
    
    def do_POST(self):
        if self.path != "/webhook":
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Not Found")
            return
        
        content_length = int(self.headers.get('Content-Length', 0))
        post_data = self.read_data(content_length)
        event_type = self.headers.get('X-GitHub-Event', '')
        user_agent = self.headers.get('User-Agent', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        content_type = self.headers.get('Content-Type', '')
        if 'application/x-www-form-urlencoded' in content_type:
            # URL-encoded –¥–∞–Ω–Ω—ã–µ, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            import urllib.parse
            post_data = urllib.parse.unquote_plus(post_data)
            self.log_message(f"URL-decoded payload, new size: {len(post_data)}")
        elif post_data.startswith('payload='):
            # GitHub –∏–Ω–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ payload=url_encoded_json
            post_data = post_data[8:]  # –£–±–∏—Ä–∞–µ–º 'payload='
            import urllib.parse
            post_data = urllib.parse.unquote_plus(post_data)
            self.log_message(f"Extracted and URL-decoded payload, new size: {len(post_data)}")
        
        self.log_message(f"POST /webhook - Event: {event_type}, User-Agent: {user_agent}")
        
        temp_dir = f"/tmp/webhook-python-{os.getpid()}-{int(datetime.now().timestamp())}"
        try:
            os.makedirs(temp_dir, exist_ok=True)
            
            with open(f"{temp_dir}/event_type", "w") as f:
                f.write(event_type)
            with open(f"{temp_dir}/payload", "w") as f:
                f.write(post_data)
            with open(f"{temp_dir}/user_agent", "w") as f:
                f.write(user_agent)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.log_message(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: event_type='{event_type}', payload_size={len(post_data)}, user_agent='{user_agent}'")
            
            # –ò—â–µ–º webhook.sh –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            possible_paths = [
                os.environ.get("WEBHOOK_SCRIPT_PATH"),
                "/usr/local/bin/webhook.sh",
                "/usr/bin/webhook.sh", 
                "./webhook.sh",
                os.path.expanduser("~/webhook.sh")
            ]
            
            webhook_script = None
            for path in possible_paths:
                if path and os.path.exists(path):
                    webhook_script = path
                    break
            
            if webhook_script:
                subprocess.Popen([
                    "/usr/bin/bash", webhook_script, "handle_webhook_request", temp_dir
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                self.log_message(f"Webhook processing started for event: {event_type}")
            else:
                self.log_message("ERROR: webhook.sh not found")
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"status":"ok"}')
            
        except Exception as e:
            self.log_message(f"Error processing webhook: {e}")
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"status":"error"}')
    
    def read_data(self, content_length):
        if content_length == 0:
            return ""
        try:
            data = self.rfile.read(content_length)
            return data.decode('utf-8')
        except Exception as e:
            self.log_message(f"Error reading POST data: {e}")
            return ""

def run_server(port=9000):
    try:
        with socketserver.TCPServer(("", port), WebhookHandler) as httpd:
            print(f"Python webhook server running on port {port}")
            log_file = "/var/lib/webhook-automation/logs/webhook.log"
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            try:
                with open(log_file, "a") as f:
                    f.write(f"[{timestamp}] [INFO] [PYTHON-SERVER] Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}\n")
            except:
                pass
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nServer stopped by user")
    except Exception as e:
        print(f"Server error: {e}")
        return 1
    return 0

if __name__ == "__main__":
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 9000
    sys.exit(run_server(port))
PYTHON_SERVER_EOF

  echo "$script_path"
}

# –ó–∞–ø—É—Å–∫ Python webhook —Å–µ—Ä–≤–µ—Ä–∞
start_python_webhook_server() {
  if ! command -v python3 &> /dev/null; then
    echo -e "${RED}Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é bash —Å–µ—Ä–≤–µ—Ä...${NC}"
    start_bash_webhook_server
    return
  fi
  
  echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ Python webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $WEBHOOK_PORT...${NC}"
  
  # –°–æ–∑–¥–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  local script_path=$(create_python_webhook_server)
  
  if [ ! -f "$script_path" ]; then
    echo -e "${RED}–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç. –ò—Å–ø–æ–ª—å–∑—É—é bash —Å–µ—Ä–≤–µ—Ä...${NC}"
    start_bash_webhook_server
    return
  fi
  
  echo -e "${YELLOW}Python —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: $script_path${NC}"
  
  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Å–∫—Ä–∏–ø—Ç–∞
  if ! python3 -m py_compile "$script_path" 2>/dev/null; then
    echo -e "${RED}–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Å–∫—Ä–∏–ø—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É—é bash —Å–µ—Ä–≤–µ—Ä...${NC}"
    rm -f "$script_path" 2>/dev/null
    start_bash_webhook_server
    return
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç
  if ss -tuln 2>/dev/null | grep -q ":${WEBHOOK_PORT} " || netstat -tuln 2>/dev/null | grep -q ":${WEBHOOK_PORT} "; then
    echo -e "${RED}–ü–æ—Ä—Ç $WEBHOOK_PORT —É–∂–µ –∑–∞–Ω—è—Ç. –ò—Å–ø–æ–ª—å–∑—É—é bash —Å–µ—Ä–≤–µ—Ä...${NC}"
    rm -f "$script_path" 2>/dev/null
    start_bash_webhook_server
    return
  fi
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
  local log_file="/tmp/webhook_python_${WEBHOOK_PORT}.log"
  nohup python3 "$script_path" "$WEBHOOK_PORT" > "$log_file" 2>&1 &
  local python_pid=$!
  
  echo -e "${YELLOW}Python —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å PID: $python_pid${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä
  sleep 3
  if kill -0 "$python_pid" 2>/dev/null && pgrep -f "python3.*$script_path" > /dev/null; then
    echo -e "${GREEN}${BOLD}üöÄ Python webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!${NC}"
    log_event "INFO" "Python webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $WEBHOOK_PORT (PID: $python_pid)"
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    (sleep 300 && rm -f "$script_path" "$log_file" 2>/dev/null) &
  else
    echo -e "${RED}–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python —Å–µ—Ä–≤–µ—Ä–∞.${NC}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if [ -f "$log_file" ]; then
      echo -e "${RED}–û—à–∏–±–∫–∏ Python —Å–µ—Ä–≤–µ—Ä–∞:${NC}"
      head -n 10 "$log_file"
    fi
    
    rm -f "$script_path" "$log_file" 2>/dev/null
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É—é bash —Å–µ—Ä–≤–µ—Ä...${NC}"
    start_bash_webhook_server
    return
  fi
  
  show_webhook_info
}

# –ó–∞–ø—É—Å–∫ Bash webhook —Å–µ—Ä–≤–µ—Ä–∞
start_bash_webhook_server() {
  echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ Bash webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $WEBHOOK_PORT...${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  if command -v socat &> /dev/null; then
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É–µ–º socat –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞${NC}"
    start_socat_webhook_server
    return $?
  elif command -v nc &> /dev/null; then
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É–µ–º netcat –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞${NC}"
  else
    echo -e "${RED}–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ socat, –Ω–∏ netcat. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –¥–ª—è bash webhook —Å–µ—Ä–≤–µ—Ä–∞.${NC}"
    echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: apt-get install socat netcat-openbsd –∏–ª–∏ yum install socat nmap-ncat${NC}"
    return 1
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç
  if ss -tuln 2>/dev/null | grep -q ":${WEBHOOK_PORT} " || netstat -tuln 2>/dev/null | grep -q ":${WEBHOOK_PORT} "; then
    echo -e "${RED}–ü–æ—Ä—Ç $WEBHOOK_PORT —É–∂–µ –∑–∞–Ω—è—Ç.${NC}"
    return 1
  fi
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π webhook —Å–µ—Ä–≤–µ—Ä
  local log_file="/tmp/webhook_bash_${WEBHOOK_PORT}.log"
  
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ü–∏–∫–ª —Å netcat
  nohup bash -c "
    export WEBHOOK_SCRIPT_PATH='$WEBHOOK_SCRIPT_PATH'
    export WEBHOOK_PORT='$WEBHOOK_PORT'
    
    # –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_event() {
      local level=\$1
      local message=\$2
      local timestamp=\$(date '+%Y-%m-%d %H:%M:%S')
      echo \"[\$timestamp] [\$level] \$message\" >> /var/lib/webhook-automation/logs/webhook.log 2>/dev/null || true
    }
    
    log_event 'INFO' 'Bash webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É \$WEBHOOK_PORT'
    
    while true; do
      {
        echo 'HTTP/1.1 200 OK'
        echo 'Content-Type: application/json'
        echo 'Content-Length: 15'
        echo 'Connection: close'
        echo ''
        echo '{\"status\":\"ok\"}'
      } | nc -l -p \$WEBHOOK_PORT -q 1
      sleep 0.1
    done
  " > "$log_file" 2>&1 &
  
  local bash_pid=$!
  echo -e "${YELLOW}Bash —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å PID: $bash_pid${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫
  sleep 2
  if kill -0 "$bash_pid" 2>/dev/null; then
    echo -e "${GREEN}${BOLD}üöÄ Bash webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!${NC}"
    log_event "INFO" "Bash webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $WEBHOOK_PORT (PID: $bash_pid)"
  else
    echo -e "${RED}–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Bash —Å–µ—Ä–≤–µ—Ä–∞.${NC}"
    if [ -f "$log_file" ]; then
      echo -e "${RED}–û—à–∏–±–∫–∏:${NC}"
      head -n 10 "$log_file"
    fi
    return 1
  fi
  
  show_webhook_info
}

# –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ socat
start_socat_webhook_server() {
  local log_file="/tmp/webhook_socat_${WEBHOOK_PORT}.log"
  
  echo -e "${YELLOW}–ó–∞–ø—É—Å–∫ socat webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $WEBHOOK_PORT...${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç
  if ss -tuln 2>/dev/null | grep -q ":${WEBHOOK_PORT} " || netstat -tuln 2>/dev/null | grep -q ":${WEBHOOK_PORT} "; then
    echo -e "${RED}–ü–æ—Ä—Ç $WEBHOOK_PORT —É–∂–µ –∑–∞–Ω—è—Ç.${NC}"
    return 1
  fi
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º socat —Å–µ—Ä–≤–µ—Ä
  nohup socat TCP-LISTEN:${WEBHOOK_PORT},fork,reuseaddr EXEC:"/bin/bash -c '
    read method path version
    
    # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    while read line && [ \"\$line\" != \$\"\\r\" ]; do
      if [[ \"\$line\" =~ ^X-GitHub-Event:[[:space:]]* ]]; then
        event_type=\$(echo \"\$line\" | sed \"s/.*X-GitHub-Event:[[:space:]]*//\" | tr -d \"\\r\\n\")
      elif [[ \"\$line\" =~ ^Content-Length:[[:space:]]* ]]; then
        content_length=\$(echo \"\$line\" | sed \"s/.*Content-Length:[[:space:]]*//\" | tr -d \"\\r\\n \")
      fi
    done
    
    # –ß–∏—Ç–∞–µ–º payload –µ—Å–ª–∏ –µ—Å—Ç—å
    payload=\"\"
    if [ \"\$content_length\" -gt 0 ] && [ \"\$content_length\" -lt 10000 ]; then
      payload=\$(head -c \"\$content_length\" 2>/dev/null)
    fi
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook –µ—Å–ª–∏ —ç—Ç–æ POST –∫ /webhook
    if [[ \"\$method\" == \"POST\" ]] && [[ \"\$path\" == \"/webhook\" ]] && [ ! -z \"\$event_type\" ]; then
      temp_dir=\"/tmp/webhook-socat-\$\$-\$(date +%s)\"
      mkdir -p \"\$temp_dir\"
      echo \"\$event_type\" > \"\$temp_dir/event_type\"
      echo \"\$payload\" > \"\$temp_dir/payload\"
      echo \"GitHub-Hookshot\" > \"\$temp_dir/user_agent\"
      
      # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
      \"$WEBHOOK_SCRIPT_PATH\" handle_webhook_request \"\$temp_dir\" &
    fi
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 OK –¥–ª—è /webhook
    if [[ \"\$path\" == \"/webhook\" ]]; then
      echo \"HTTP/1.1 200 OK\"
      echo \"Content-Type: application/json\"
      echo \"Content-Length: 15\"
      echo \"Connection: close\"
      echo \"\"
      echo \"{\\\"status\\\":\\\"ok\\\"}\"
    else
      echo \"HTTP/1.1 404 Not Found\"
      echo \"Content-Type: text/plain\"
      echo \"Content-Length: 9\"
      echo \"Connection: close\"
      echo \"\"
      echo \"Not Found\"
    fi
  '" > "$log_file" 2>&1 &
  
  local socat_pid=$!
  echo -e "${YELLOW}Socat —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å PID: $socat_pid${NC}"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫
  sleep 2
  if kill -0 "$socat_pid" 2>/dev/null; then
    echo -e "${GREEN}${BOLD}üöÄ Socat webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!${NC}"
    log_event "INFO" "Socat webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $WEBHOOK_PORT (PID: $socat_pid)"
    show_webhook_info
    return 0
  else
    echo -e "${RED}–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Socat —Å–µ—Ä–≤–µ—Ä–∞.${NC}"
    if [ -f "$log_file" ]; then
      echo -e "${RED}–û—à–∏–±–∫–∏:${NC}"
      head -n 10 "$log_file"
    fi
    return 1
  fi
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
show_webhook_info() {
  echo ""
  echo -e "${YELLOW}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub webhook:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo -e "${BOLD}URL:${NC} ${GREEN}http://$(hostname -I | awk '{print $1}'):$WEBHOOK_PORT/webhook${NC}"
  echo -e "${BOLD}Content type:${NC} application/json"
  echo -e "${BOLD}Secret:${NC} ${WEBHOOK_SECRET:-'–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
  echo -e "${BOLD}Events:${NC} Just the push event (–∏–ª–∏ Individual events -> Push)"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo ""
  echo -e "${YELLOW}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:${NC}"
  echo -e "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã: ${GREEN}curl http://$(hostname -I | awk '{print $1}'):$WEBHOOK_PORT/webhook${NC}"
  echo ""
  echo -n -e "${GREEN}–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å webhook —Å–µ—Ä–≤–µ—Ä –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? (y/n): ${NC}"
  read test_webhook
  
  if [[ "$test_webhook" == "y" || "$test_webhook" == "Y" ]]; then
    test_webhook_server
  fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
show_detailed_server_status() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}       –ü–û–î–†–û–ë–ù–´–ô –°–¢–ê–¢–£–° –°–ï–†–í–ï–†–ê              ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  local server_status="${RED}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
  local server_type=""
  local server_pid=""
  
  if pgrep -f "python3.*webhook_server.*${WEBHOOK_PORT}" > /dev/null; then
    server_status="${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
    server_type=" (Python)"
    server_pid=$(pgrep -f "python3.*webhook_server.*${WEBHOOK_PORT}")
  elif pgrep -f "socat.*${WEBHOOK_PORT}" > /dev/null; then
    server_status="${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
    server_type=" (Socat)"
    server_pid=$(pgrep -f "socat.*${WEBHOOK_PORT}")
  elif pgrep -f "nc.*${WEBHOOK_PORT}" > /dev/null; then
    server_status="${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
    server_type=" (Netcat)"
    server_pid=$(pgrep -f "nc.*${WEBHOOK_PORT}")
  fi
  
  echo -e "${YELLOW}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook —Å–µ—Ä–≤–µ—Ä–µ:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo -e "${BOLD}–°—Ç–∞—Ç—É—Å:${NC} $server_status$server_type"
  echo -e "${BOLD}–ü–æ—Ä—Ç:${NC} $WEBHOOK_PORT"
  
  if [ ! -z "$server_pid" ]; then
    echo -e "${BOLD}PID –ø—Ä–æ—Ü–µ—Å—Å–∞:${NC} $server_pid"
    echo -e "${BOLD}–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:${NC} $(ps -o lstart= -p $server_pid 2>/dev/null || echo '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')"
    echo -e "${BOLD}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:${NC} $(ps -o %cpu= -p $server_pid 2>/dev/null || echo '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')%"
    echo -e "${BOLD}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:${NC} $(ps -o %mem= -p $server_pid 2>/dev/null || echo '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')%"
  fi
  
  echo -e "${BOLD}URL –¥–ª—è webhook:${NC} http://$(hostname -I | awk '{print $1}'):$WEBHOOK_PORT/webhook"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  
  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–≥–∞
  echo ""
  echo -e "${YELLOW}–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  if [ -f "$WEBHOOK_LOG" ]; then
    tail -n 10 "$WEBHOOK_LOG" | while read line; do
      if [[ "$line" == *"ERROR"* ]]; then
        echo -e "${RED}$line${NC}"
      elif [[ "$line" == *"SUCCESS"* ]]; then
        echo -e "${GREEN}$line${NC}"
      elif [[ "$line" == *"WARNING"* ]]; then
        echo -e "${YELLOW}$line${NC}"
      else
        echo -e "${CYAN}$line${NC}"
      fi
    done
  else
    echo -e "${GRAY}–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
  fi
  
  echo ""
  echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...${NC}"
  read
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–∞
test_webhook_server() {
  echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
  
  local server_ip=$(hostname -I | awk '{print $1}')
  local webhook_url="http://$server_ip:$WEBHOOK_PORT/webhook"
  
  # –¢–µ—Å—Ç 1: GET –∑–∞–ø—Ä–æ—Å
  echo -e "${CYAN}–¢–µ—Å—Ç 1: GET –∑–∞–ø—Ä–æ—Å –∫ webhook${NC}"
  if curl -s --connect-timeout 5 "$webhook_url" > /dev/null; then
    echo -e "${GREEN}‚úÖ GET –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω${NC}"
  else
    echo -e "${RED}‚ùå GET –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω${NC}"
    return 1
  fi
  
  # –¢–µ—Å—Ç 2: –ò–º–∏—Ç–∞—Ü–∏—è ping —Å–æ–±—ã—Ç–∏—è –æ—Ç GitHub
  echo -e "${CYAN}–¢–µ—Å—Ç 2: –ò–º–∏—Ç–∞—Ü–∏—è ping —Å–æ–±—ã—Ç–∏—è –æ—Ç GitHub${NC}"
  local ping_payload='{"zen":"Favor focus over features.","hook_id":123,"repository":{"name":"test-repo","clone_url":"https://github.com/test/repo.git","default_branch":"main"}}'
  
  if curl -s --connect-timeout 5 -X POST \
    -H "Content-Type: application/json" \
    -H "X-GitHub-Event: ping" \
    -H "User-Agent: GitHub-Hookshot/test" \
    -d "$ping_payload" \
    "$webhook_url" > /dev/null; then
    echo -e "${GREEN}‚úÖ POST ping –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω${NC}"
  else
    echo -e "${RED}‚ùå POST ping –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω${NC}"
    return 1
  fi
  
  # –¢–µ—Å—Ç 3: –ò–º–∏—Ç–∞—Ü–∏—è push —Å–æ–±—ã—Ç–∏—è
  echo -e "${CYAN}–¢–µ—Å—Ç 3: –ò–º–∏—Ç–∞—Ü–∏—è push —Å–æ–±—ã—Ç–∏—è –æ—Ç GitHub${NC}"
  local push_payload='{"ref":"refs/heads/master","repository":{"name":"test-repo","clone_url":"https://github.com/test/repo.git"},"pusher":{"name":"testuser"},"head_commit":{"message":"Test commit"}}'
  
  if curl -s --connect-timeout 5 -X POST \
    -H "Content-Type: application/json" \
    -H "X-GitHub-Event: push" \
    -H "User-Agent: GitHub-Hookshot/test" \
    -d "$push_payload" \
    "$webhook_url" > /dev/null; then
    echo -e "${GREEN}‚úÖ POST push –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω${NC}"
  else
    echo -e "${RED}‚ùå POST push –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω${NC}"
    return 1
  fi
  
  echo ""
  echo -e "${GREEN}${BOLD}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!${NC}"
  echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π.${NC}"
  
  sleep 2
}

# –§—É–Ω–∫—Ü–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è bash –≤–µ—Ä—Å–∏—è)
webhook_server() {
  local port="$WEBHOOK_PORT"
  
  log_event "INFO" "Bash webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É $port"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å netcat
  if ! command -v nc &> /dev/null; then
    log_event "ERROR" "netcat (nc) –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã bash webhook —Å–µ—Ä–≤–µ—Ä–∞"
    return 1
  fi
  
  while true; do
    # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ socat –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if command -v socat &> /dev/null; then
      webhook_server_socat "$port"
      return $?
    fi
    
    # Fallback –Ω–∞ netcat —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    local temp_dir="/tmp/webhook-bash-$$-$(date +%s)"
    mkdir -p "$temp_dir"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    {
      local request_line=""
      local content_length=0
      local event_type=""
      local user_agent=""
      local in_headers=true
      local is_webhook=false
      local is_post=false
      
      # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
      read request_line
      request_line=$(echo "$request_line" | tr -d '\r\n')
      
      if [[ "$request_line" =~ ^POST[[:space:]]/webhook ]]; then
        is_post=true
        is_webhook=true
      elif [[ "$request_line" =~ ^GET[[:space:]]/webhook ]]; then
        is_webhook=true
      fi
      
      # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      while IFS= read -r line && [ "$in_headers" = true ]; do
        line=$(echo "$line" | tr -d '\r\n')
        
        if [[ -z "$line" ]]; then
          in_headers=false
          break
        fi
        
        if [[ "$line" =~ ^Content-Length:[[:space:]]* ]]; then
          content_length=$(echo "$line" | sed 's/.*Content-Length:[[:space:]]*//' | tr -d ' ')
        elif [[ "$line" =~ ^X-GitHub-Event:[[:space:]]* ]]; then
          event_type=$(echo "$line" | sed 's/.*X-GitHub-Event:[[:space:]]*//' | tr -d ' ')
        elif [[ "$line" =~ ^User-Agent:[[:space:]]* ]]; then
          user_agent=$(echo "$line" | sed 's/.*User-Agent:[[:space:]]*//')
        fi
      done
      
      # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      local payload=""
      if [ "$content_length" -gt 0 ] && [ "$content_length" -lt 10000 ]; then
        payload=$(head -c "$content_length" 2>/dev/null || echo "")
      fi
      
      # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      log_event "INFO" "Bash webhook: ${request_line} –æ—Ç ${user_agent}"
      
      if [ "$is_webhook" = true ]; then
        if [ "$is_post" = true ] && [ ! -z "$event_type" ]; then
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
          echo "$event_type" > "$temp_dir/event_type"
          echo "$payload" > "$temp_dir/payload"
          echo "$user_agent" > "$temp_dir/user_agent"
          
                     # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
           "$WEBHOOK_SCRIPT_PATH" handle_webhook_request "$temp_dir" &
        fi
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        echo -e "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nConnection: close\r\n\r\n{\"status\":\"ok\"}"
      else
        # 404 –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—É—Ç–µ–π
        echo -e "HTTP/1.1 404 Not Found\r\nContent-Type: text/plain\r\nConnection: close\r\n\r\nNot Found"
      fi
      
    } | nc -l -p "$port" -q 1
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    rm -rf "$temp_dir" 2>/dev/null
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    sleep 0.1
  done
}

# Webhook —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ socat (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
webhook_server_socat() {
  local port="$1"
  
  log_event "INFO" "–ò—Å–ø–æ–ª—å–∑—É–µ–º socat –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $port"
  
  socat TCP-LISTEN:${port},fork,reuseaddr EXEC:"/usr/bin/bash -c '
    source $0
    
    # –ß–∏—Ç–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
    request_line=\"\"
    content_length=0
    event_type=\"\"
    user_agent=\"\"
    
    read request_line
    request_line=\$(echo \"\$request_line\" | tr -d \"\\r\\n\")
    
    # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    while IFS= read -r line; do
      line=\$(echo \"\$line\" | tr -d \"\\r\\n\")
      [ -z \"\$line\" ] && break
      
      case \"\$line\" in
        Content-Length:*) content_length=\$(echo \"\$line\" | sed \"s/.*Content-Length:[[:space:]]*//\" | tr -d \" \") ;;
        X-GitHub-Event:*) event_type=\$(echo \"\$line\" | sed \"s/.*X-GitHub-Event:[[:space:]]*//\" | tr -d \" \") ;;
        User-Agent:*) user_agent=\$(echo \"\$line\" | sed \"s/.*User-Agent:[[:space:]]*//\") ;;
      esac
    done
    
    # –ß–∏—Ç–∞–µ–º payload
    payload=\"\"
    if [ \"\$content_length\" -gt 0 ] && [ \"\$content_length\" -lt 10000 ]; then
      payload=\$(head -c \"\$content_length\" 2>/dev/null || echo \"\")
    fi
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    if [[ \"\$request_line\" == *\"/webhook\"* ]]; then
      if [[ \"\$request_line\" == \"POST\"* ]] && [ ! -z \"\$event_type\" ]; then
        temp_dir=\"/tmp/webhook-socat-\$\$-\$(date +%s)\"
        mkdir -p \"\$temp_dir\"
        echo \"\$event_type\" > \"\$temp_dir/event_type\"
        echo \"\$payload\" > \"\$temp_dir/payload\"
        echo \"\$user_agent\" > \"\$temp_dir/user_agent\"
                 \"\$WEBHOOK_SCRIPT_PATH\" handle_webhook_request \"\$temp_dir\" &
      fi
      echo -e \"HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nConnection: close\\r\\n\\r\\n{\\\"status\\\":\\\"ok\\\"}\"
    else
      echo -e \"HTTP/1.1 404 Not Found\\r\\nContent-Type: text/plain\\r\\nConnection: close\\r\\n\\r\\nNot Found\"
    fi
  '"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–∞
handle_webhook_request() {
  local temp_dir="$1"
  
  if [ -z "$temp_dir" ] || [ ! -d "$temp_dir" ]; then
    log_event "ERROR" "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ webhook –∑–∞–ø—Ä–æ—Å–∞"
    return 1
  fi
  
  local event_type=""
  local payload=""
  
  # –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if [ -f "$temp_dir/event_type" ]; then
    event_type=$(cat "$temp_dir/event_type")
  fi
  
  if [ -f "$temp_dir/payload" ]; then
    payload=$(cat "$temp_dir/payload")
    log_event "DEBUG" "Payload —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: $(wc -c < "$temp_dir/payload" 2>/dev/null) –±–∞–π—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ payload URL-encoded (–¥–ª—è bash —Å–µ—Ä–≤–µ—Ä–æ–≤)
    if [[ "$payload" == *"%"* ]] || [[ "$payload" == payload=* ]]; then
      log_event "DEBUG" "Payload –≤ URL-encoded —Ñ–æ—Ä–º–∞—Ç–µ, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º..."
      
      # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å payload= –µ—Å–ª–∏ –µ—Å—Ç—å
      if [[ "$payload" == payload=* ]]; then
        payload=${payload#payload=}
        log_event "DEBUG" "–£–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å payload="
      fi
      
      # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded payload
      if command -v python3 >/dev/null 2>&1; then
        payload=$(echo "$payload" | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote_plus(sys.stdin.read().strip()))")
        log_event "DEBUG" "Payload –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Python"
      else
        # Fallback –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ sed (–æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
        payload=$(echo "$payload" | sed 's/%22/"/g; s/%7B/{/g; s/%7D/}/g; s/%3A/:/g; s/%2C/,/g; s/%20/ /g; s/+/ /g')
        log_event "DEBUG" "Payload –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ sed (—á–∞—Å—Ç–∏—á–Ω–æ)"
      fi
      
      log_event "DEBUG" "–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload, –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: $(echo "$payload" | head -c 100)"
    fi
  else
    log_event "ERROR" "–§–∞–π–ª payload –Ω–µ –Ω–∞–π–¥–µ–Ω: $temp_dir/payload"
  fi
  
  log_event "INFO" "–ü–æ–ª—É—á–µ–Ω webhook —Å–æ–±—ã—Ç–∏–µ: '$event_type'"
  
  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  if [ ! -z "$payload" ]; then
    log_event "DEBUG" "Payload –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: $(echo "$payload" | head -c 100)"
  else
    log_event "ERROR" "Payload –ø—É—Å—Ç –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"
  fi
  
  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
  log_event "DEBUG" "üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: '$event_type'"
  
  case "$event_type" in
    "ping")
      log_event "DEBUG" "üì° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ping —Å–æ–±—ã—Ç–∏–µ"
      handle_ping_event "$payload"
      ;;
    "push")
      log_event "DEBUG" "üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º push —Å–æ–±—ã—Ç–∏–µ"
      handle_push_event "$payload"
      ;;
    "pull_request")
      log_event "INFO" "üìã –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ pull_request (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)"
      ;;
    *)
      log_event "WARNING" "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: '$event_type'"
      ;;
  esac
  
  log_event "DEBUG" "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏—è '$event_type' –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  
  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  rm -rf "$temp_dir" 2>/dev/null
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ping —Å–æ–±—ã—Ç–∏—è –æ—Ç GitHub
handle_ping_event() {
  local payload="$1"
  
  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π payload –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  log_event "DEBUG" "Ping payload —Ä–∞–∑–º–µ—Ä: $(echo "$payload" | wc -c) —Å–∏–º–≤–æ–ª–æ–≤"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
  if command -v jq >/dev/null 2>&1; then
    if echo "$payload" | jq . >/dev/null 2>&1; then
      log_event "DEBUG" "JSON –≤–∞–ª–∏–¥–µ–Ω"
    else
      log_event "ERROR" "JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      local payload_sample=$(echo "$payload" | head -c 200)
      log_event "DEBUG" "–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ payload: $payload_sample"
      return 1
    fi
  fi
  
  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–∑ ping —Å–æ–±—ã—Ç–∏—è
  local repo_name=""
  local repo_url=""
  local default_branch=""
  
  if command -v jq >/dev/null 2>&1; then
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º jq –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    repo_name=$(echo "$payload" | jq -r '.repository.name // empty' 2>/dev/null)
    repo_url=$(echo "$payload" | jq -r '.repository.clone_url // empty' 2>/dev/null)
    default_branch=$(echo "$payload" | jq -r '.repository.default_branch // empty' 2>/dev/null)
    
    log_event "DEBUG" "jq –ø–∞—Ä—Å–∏–Ω–≥ ping: repo_name='$repo_name', repo_url='$repo_url', default_branch='$default_branch'"
    
    # –ï—Å–ª–∏ jq –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if [ -z "$repo_name" ] && [ -z "$repo_url" ]; then
      log_event "DEBUG" "jq –Ω–µ –∏–∑–≤–ª–µ–∫ –¥–∞–Ω–Ω—ã–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON..."
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
      local top_keys=$(echo "$payload" | jq -r 'keys[]' 2>/dev/null | head -5 | tr '\n' ' ')
      log_event "DEBUG" "–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è JSON: '$top_keys'"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ repository
      local has_repo=$(echo "$payload" | jq -r 'has("repository")' 2>/dev/null)
      log_event "DEBUG" "–ï—Å—Ç—å –∫–ª—é—á repository: '$has_repo'"
      
      # –ï—Å–ª–∏ –∫–ª—é—á–∏ –ø—É—Å—Ç—ã–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ
      if [ -z "$top_keys" ]; then
        log_event "DEBUG" "jq –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫..."
        if echo "$payload" | grep -q '"repository"'; then
          log_event "DEBUG" "–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç 'repository' –≤ payload"
        else
          log_event "DEBUG" "–¢–µ–∫—Å—Ç 'repository' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ payload"
        fi
      fi
      
      if [ "$has_repo" = "true" ]; then
        local repo_keys=$(echo "$payload" | jq -r '.repository | keys[]' 2>/dev/null | head -5 | tr '\n' ' ')
        log_event "DEBUG" "–ö–ª—é—á–∏ repository: $repo_keys"
      fi
    fi
  else
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ jq –¥–ª—è ping —Å–æ–±—ã—Ç–∏—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    repo_name=$(echo "$payload" | grep -o '"name"[[:space:]]*:[[:space:]]*"[^"]*"' | head -1 | sed 's/.*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
    repo_url=$(echo "$payload" | grep -o '"clone_url"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"clone_url"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
    default_branch=$(echo "$payload" | grep -o '"default_branch"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"default_branch"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
    
    log_event "DEBUG" "sed –ø–∞—Ä—Å–∏–Ω–≥ ping: repo_name='$repo_name', repo_url='$repo_url', default_branch='$default_branch'"
  fi
  
  # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –∏ –º–µ—Ç–æ–¥—ã
  if [ -z "$repo_name" ] || [ -z "$repo_url" ]; then
    log_event "DEBUG" "–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã..."
    
    if command -v jq >/dev/null 2>&1; then
      # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –≤ JSON
      if [ -z "$repo_name" ]; then
        # –ü—Ä–æ–±—É–µ–º full_name –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        local full_name=$(echo "$payload" | jq -r '.repository.full_name // empty' 2>/dev/null)
        if [ ! -z "$full_name" ]; then
          repo_name=$(echo "$full_name" | cut -d'/' -f2)
          log_event "DEBUG" "–ò–∑–≤–ª–µ—á–µ–Ω–æ repo_name –∏–∑ full_name: '$full_name' -> '$repo_name'"
        fi
      fi
      
      if [ -z "$repo_url" ]; then
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –ø–æ–ª—è
        repo_url=$(echo "$payload" | jq -r '.repository.html_url // .repository.ssh_url // .repository.git_url // empty' 2>/dev/null)
        log_event "DEBUG" "–ò–∑–≤–ª–µ—á–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL: '$repo_url'"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ clone_url –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if [[ "$repo_url" == *"github.com"* ]] && [[ "$repo_url" != *".git" ]]; then
          repo_url="${repo_url}.git"
          log_event "DEBUG" "–°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω URL –≤ clone_url: '$repo_url'"
        fi
      fi
    else
      # –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ jq –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π
      if [ -z "$repo_name" ]; then
        local full_name=$(echo "$payload" | grep -o '"full_name"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"full_name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
        if [ ! -z "$full_name" ]; then
          repo_name=$(echo "$full_name" | cut -d'/' -f2)
          log_event "DEBUG" "sed: –∏–∑–≤–ª–µ—á–µ–Ω–æ repo_name –∏–∑ full_name: '$full_name' -> '$repo_name'"
        fi
      fi
      
      if [ -z "$repo_url" ]; then
        repo_url=$(echo "$payload" | grep -o '"html_url"[[:space:]]*:[[:space:]]*"[^"]*"' | head -1 | sed 's/.*"html_url"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
        if [[ "$repo_url" == *"github.com"* ]] && [[ "$repo_url" != *".git" ]]; then
          repo_url="${repo_url}.git"
        fi
        log_event "DEBUG" "sed: –∏–∑–≤–ª–µ—á–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL: '$repo_url'"
      fi
    fi
    
    log_event "DEBUG" "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: repo_name='$repo_name', repo_url='$repo_url'"
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –≥—Ä—É–±—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    if [ -z "$repo_name" ] && [ -z "$repo_url" ]; then
      log_event "DEBUG" "–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫..."
      
      # –ò—â–µ–º –ª—é–±—ã–µ GitHub URL –≤ —Ç–µ–∫—Å—Ç–µ
      local found_urls=$(echo "$payload" | grep -o 'https://github\.com/[^"[:space:]]*' | head -3)
      if [ ! -z "$found_urls" ]; then
        log_event "DEBUG" "–ù–∞–π–¥–µ–Ω–Ω—ã–µ GitHub URLs: $found_urls"
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π URL –∏ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
        repo_url=$(echo "$found_urls" | head -1)
        if [[ "$repo_url" != *".git" ]]; then
          repo_url="${repo_url}.git"
        fi
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ URL
        repo_name=$(basename "$repo_url" .git)
        
        log_event "DEBUG" "–ò–∑–≤–ª–µ—á–µ–Ω–æ —á–µ—Ä–µ–∑ –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫: repo_name='$repo_name', repo_url='$repo_url'"
      fi
    fi
  fi
  
  log_event "SUCCESS" "Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_name' (–≤–µ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '$default_branch')"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  local matching_automations=0
  local found_automations=""
  
  if [ -f "$AUTOMATIONS_FILE" ] && [ ! -z "$repo_name" ]; then
    while IFS= read -r automation; do
      # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ IFS
      local IFS='|'
      read -ra automation_info <<< "$automation"
      
      local automation_name="${automation_info[1]:-}"
      local automation_repo="${automation_info[2]:-}"
      
      log_event "DEBUG" "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é '$automation_name' —Å repo='$automation_repo'"
      
      # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
      local repo_match=false
      local match_reason=""
      
      # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      local automation_repo_name=$(basename "$automation_repo" .git)
      
      if [[ "$automation_repo" == "$repo_url" ]]; then
        repo_match=true
        match_reason="—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ URL"
      elif [[ "$automation_repo" == *"$repo_name"* ]]; then
        repo_match=true
        match_reason="—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
      elif [[ "$repo_url" == *"$automation_repo_name"* ]]; then
        repo_match=true
        match_reason="—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –±–∞–∑–æ–≤–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é"
      elif [[ "$automation_repo_name" == "$repo_name" ]]; then
        repo_match=true
        match_reason="—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π"
      fi
      
      if [ "$repo_match" = true ]; then
        ((matching_automations++))
        found_automations="$found_automations'$automation_name' "
        log_event "DEBUG" "–ù–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è '$automation_name' ($match_reason)"
      fi
    done < "$AUTOMATIONS_FILE"
  fi
  
  if [ "$matching_automations" -gt 0 ]; then
    log_event "INFO" "–ù–∞–π–¥–µ–Ω–æ $matching_automations –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_name': $found_automations"
    log_event "INFO" "üí° Ping —Å–æ–±—ã—Ç–∏—è –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é. –°–¥–µ–ª–∞–π—Ç–µ push –≤ –≤–µ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    log_event "INFO" "üß™ –î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é' –≤ –º–µ–Ω—é"
  else
    if [ ! -z "$repo_name" ]; then
      log_event "WARNING" "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_name' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
      if [ -f "$AUTOMATIONS_FILE" ]; then
        local total_automations=$(wc -l < "$AUTOMATIONS_FILE" 2>/dev/null || echo "0")
        log_event "INFO" "–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: $total_automations"
      fi
    else
      log_event "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ ping —Å–æ–±—ã—Ç–∏—è"
    fi
  fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ push —Å–æ–±—ã—Ç–∏—è –æ—Ç GitHub
handle_push_event() {
  local payload="$1"
  
  log_event "DEBUG" "=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò PUSH –°–û–ë–´–¢–ò–Ø ==="
  log_event "DEBUG" "Push payload —Ä–∞–∑–º–µ—Ä: $(echo "$payload" | wc -c) —Å–∏–º–≤–æ–ª–æ–≤"
  
  local branch=""
  local repo_url=""
  local repo_name=""
  local commit_message=""
  local pusher=""
  
  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π payload –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  log_event "DEBUG" "Push payload —Ä–∞–∑–º–µ—Ä: $(echo "$payload" | wc -c) —Å–∏–º–≤–æ–ª–æ–≤"
  
  if command -v jq >/dev/null 2>&1; then
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º jq –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    branch=$(echo "$payload" | jq -r '.ref // empty' | sed 's|refs/heads/||')
    repo_url=$(echo "$payload" | jq -r '.repository.clone_url // empty')
    repo_name=$(echo "$payload" | jq -r '.repository.name // empty')
    commit_message=$(echo "$payload" | jq -r '.head_commit.message // empty' | head -c 100)
    pusher=$(echo "$payload" | jq -r '.pusher.name // empty')
    
    log_event "DEBUG" "jq –ø–∞—Ä—Å–∏–Ω–≥: branch='$branch', repo_url='$repo_url', repo_name='$repo_name'"
  else
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ jq
    branch=$(echo "$payload" | sed -n 's/.*"ref"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p' | sed 's|refs/heads/||')
    repo_url=$(echo "$payload" | sed -n 's/.*"clone_url"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')
    repo_name=$(echo "$payload" | sed -n 's/.*"repository"[^}]*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')
    commit_message=$(echo "$payload" | sed -n 's/.*"head_commit"[^}]*"message"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p' | head -c 100)
    pusher=$(echo "$payload" | sed -n 's/.*"pusher"[^}]*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')
    
    log_event "DEBUG" "sed –ø–∞—Ä—Å–∏–Ω–≥: branch='$branch', repo_url='$repo_url', repo_name='$repo_name'"
  fi
  
  if [ -z "$branch" ] || [ -z "$repo_url" ]; then
    log_event "ERROR" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ push —Å–æ–±—ã—Ç–∏—è"
    log_event "ERROR" "branch='$branch', repo_url='$repo_url', repo_name='$repo_name'"
    log_event "DEBUG" "–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ payload: $(echo "$payload" | head -c 500)"
    return 1
  fi
  
  log_event "DEBUG" "‚úÖ –î–∞–Ω–Ω—ã–µ push —Å–æ–±—ã—Ç–∏—è –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
  
  log_event "INFO" "=== –ù–û–í–û–ï PUSH –°–û–ë–´–¢–ò–ï ==="
  log_event "INFO" "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: '$repo_name' ($repo_url)"
  log_event "INFO" "–í–µ—Ç–∫–∞: '$branch'"
  log_event "INFO" "–ê–≤—Ç–æ—Ä: '$pusher'"
  log_event "INFO" "–ö–æ–º–º–∏—Ç: '$commit_message'"
  
  local automations_executed=0
  
  # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  log_event "DEBUG" "üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –≤ —Ñ–∞–π–ª–µ: $AUTOMATIONS_FILE"
  
  if [ -f "$AUTOMATIONS_FILE" ]; then
    local total_lines=$(wc -l < "$AUTOMATIONS_FILE" 2>/dev/null || echo "0")
    log_event "DEBUG" "–§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω, —Å—Ç—Ä–æ–∫: $total_lines"
    
    local line_number=0
    while IFS= read -r automation; do
      ((line_number++))
      
      # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if [ -z "$automation" ]; then
        log_event "DEBUG" "–°—Ç—Ä–æ–∫–∞ #$line_number: –ø—É—Å—Ç–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        continue
      fi
      
      log_event "DEBUG" "–°—Ç—Ä–æ–∫–∞ #$line_number: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"
      # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ IFS
      local IFS='|'
      read -ra automation_info <<< "$automation"
      
      local automation_name="${automation_info[1]:-}"
      local automation_repo="${automation_info[2]:-}"
      local automation_branch="${automation_info[4]:-}"
      local automation_commands="${automation_info[5]:-}"
      local automation_is_private="${automation_info[7]:-}"
      local automation_encrypted_creds="${automation_info[8]:-}"
      
      log_event "DEBUG" "  üìã –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: name='$automation_name', repo='$automation_repo', branch='$automation_branch'"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –≤–µ—Ç–∫–∏
      local repo_match=false
      local match_reason=""
      
      # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      local automation_repo_name=$(basename "$automation_repo" .git)
      
      if [[ "$automation_repo" == "$repo_url" ]]; then
        repo_match=true
        match_reason="—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ URL"
      elif [[ "$automation_repo" == *"$repo_name"* ]]; then
        repo_match=true
        match_reason="—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
      elif [[ "$repo_url" == *"$automation_repo_name"* ]]; then
        repo_match=true
        match_reason="—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –±–∞–∑–æ–≤–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é"
      fi
      
      log_event "DEBUG" "  üîç –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: repo_match=$repo_match ($match_reason), branch_match=${automation_branch}==${branch}"
      
      if [ "$repo_match" = true ] && [[ "$automation_branch" == "$branch" ]]; then
        log_event "DEBUG" "  ‚úÖ –ü–û–õ–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –Ω–∞–π–¥–µ–Ω–æ!"
        log_event "INFO" "üöÄ –ó–ê–ü–£–°–ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$automation_name' –¥–ª—è –≤–µ—Ç–∫–∏ '$branch'"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        log_event "DEBUG" "  üîê –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥: is_private='$automation_is_private', has_creds=$([ ! -z "$automation_encrypted_creds" ] && echo "yes" || echo "no")"
        
        local final_commands="$automation_commands"
        if [ "$automation_is_private" = "yes" ] && [ ! -z "$automation_encrypted_creds" ]; then
          log_event "DEBUG" "  üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
          log_event "DEBUG" "  –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): $(echo "$automation_encrypted_creds" | head -c 50)..."
          
          # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ROT13, –ø–æ—Ç–æ–º base64)
          local decrypted_creds=$(echo "$automation_encrypted_creds" | tr 'A-Za-z' 'N-ZA-Mn-za-m' | base64 -d 2>/dev/null)
          
          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
          if [ -z "$decrypted_creds" ] || [[ "$decrypted_creds" == *$'\0'* ]]; then
            log_event "DEBUG" "  –ü–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"
            decrypted_creds=$(echo "$automation_encrypted_creds" | base64 -d 2>/dev/null | tr 'A-Za-z' 'N-ZA-Mn-za-m' 2>/dev/null)
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          if [ ! -z "$decrypted_creds" ]; then
            log_event "DEBUG" "  –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤): $(echo "$decrypted_creds" | head -c 20)..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if [[ "$decrypted_creds" =~ ^[a-zA-Z0-9_-]+:ghp_[a-zA-Z0-9_-]+$ ]]; then
              log_event "DEBUG" "  ‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã (–¥–ª–∏–Ω–∞: $(echo "$decrypted_creds" | wc -c) —Å–∏–º–≤–æ–ª–æ–≤)"
            else
              log_event "ERROR" "  ‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
              log_event "DEBUG" "  –î–∞–Ω–Ω—ã–µ: '$decrypted_creds'"
              decrypted_creds=""  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            fi
          fi
          
          if [ ! -z "$decrypted_creds" ]; then
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (—Ö–∞—Ä–¥–∫–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
            local auth_url="https://$decrypted_creds@github.com/KUZKO-LTD/tg-manager.git"
            log_event "DEBUG" "  –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π auth URL: $auth_url"
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ URL –≤ –∫–æ–º–∞–Ω–¥–∞—Ö, —É–±–∏—Ä–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            final_commands=$(echo "$automation_commands" | sed -E "s|https://[^[:space:]'\"]+|$auth_url|g")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã set-url, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
            if [[ "$final_commands" != *"git remote set-url origin"* ]]; then
              final_commands=$(echo "$final_commands" | sed "s|git pull origin|git remote set-url origin '$auth_url' \&\& git pull origin|g")
            fi
            log_event "DEBUG" "  üîß –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
          else
            log_event "ERROR" "  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
          fi
        else
          log_event "DEBUG" "  üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"
          # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          final_commands=$(echo "$automation_commands" | sed -E "s|https://[^[:space:]'\"]+|https://github.com/KUZKO-LTD/tg-manager.git|g")
        fi
        
        log_event "DEBUG" "  üíª –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: $final_commands"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ–Ω–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        log_event "INFO" "  üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –í–´–ü–û–õ–ù–ï–ù–ò–ï –∫–æ–º–∞–Ω–¥..."
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_event "INFO" "=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò '$automation_name' ==="
        log_event "INFO" "–ö–æ–º–∞–Ω–¥—ã: $final_commands"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        local temp_output=$(mktemp)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        (
          set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
          cd / # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          
          # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] –°–¢–ê–†–¢: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$automation_name'"
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] –ö–û–ú–ê–ù–î–´: $final_commands"
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] ---"
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
          eval "$final_commands" 2>&1
          
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] ---"
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] –§–ò–ù–ò–®: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è '$automation_name' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        ) > "$temp_output" 2>&1
        
        local exit_code=$?
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        cat "$temp_output" >> "$WEBHOOK_LOG"
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if [ $exit_code -eq 0 ]; then
          log_event "SUCCESS" "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è '$automation_name' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (exit code: 0)"
        else
          log_event "ERROR" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$automation_name' (exit code: $exit_code)"
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          log_event "ERROR" "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞: $(tail -n 5 "$temp_output" | tr '\n' '; ')"
        fi
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        rm -f "$temp_output"
        
        log_event "INFO" "=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò '$automation_name' ==="
        
        ((automations_executed++))
      else
        log_event "DEBUG" "  ‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è '$automation_name' –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç (repo_match=$repo_match, branch_match=${automation_branch}==${branch})"
      fi
    done < "$AUTOMATIONS_FILE"
    
    log_event "DEBUG" "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: $line_number"
  else
    log_event "ERROR" "‚ùå –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: $AUTOMATIONS_FILE"
  fi
  
  log_event "DEBUG" "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: –Ω–∞–π–¥–µ–Ω–æ $automations_executed –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π"
  
  if [ "$automations_executed" -eq 0 ]; then
    log_event "WARNING" "‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è –≤–µ—Ç–∫–∏ '$branch' —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è '$repo_name'"
    log_event "INFO" "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è–º–∏'"
  else
    log_event "INFO" "üöÄ –ó–∞–ø—É—â–µ–Ω–æ $automations_executed –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è push –≤ '$branch'"
  fi
  
  log_event "DEBUG" "=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò PUSH –°–û–ë–´–¢–ò–Ø ==="
}

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
test_automation_manual() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}         –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò         ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  if [ ! -f "$AUTOMATIONS_FILE" ] || [ ! -s "$AUTOMATIONS_FILE" ]; then
    echo -e "${RED}–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.${NC}"
    sleep 2
    return 1
  fi
  
  echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:${NC}"
  echo ""
  
  local automation_count=0
  local automation_names=()
  local automation_ids=()
  
  while IFS='|' read -r id name repo path branch commands date is_private encrypted_creds; do
    if [ ! -z "$id" ] && [ ! -z "$name" ]; then
      ((automation_count++))
      automation_names+=("$name")
      automation_ids+=("$id")
      echo -e "${CYAN}$automation_count.${NC} $name (–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $(basename "$repo" .git))"
    fi
  done < "$AUTOMATIONS_FILE"
  
  if [ "$automation_count" -eq 0 ]; then
    echo -e "${RED}–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.${NC}"
    sleep 2
    return 1
  fi
  
  echo ""
  echo -n -e "${GREEN}–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-$automation_count): ${NC}"
  read selected_index
  
  if ! [[ "$selected_index" =~ ^[0-9]+$ ]] || [ "$selected_index" -lt 1 ] || [ "$selected_index" -gt "$automation_count" ]; then
    echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.${NC}"
    sleep 2
    return 1
  fi
  
  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é (–∏–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0)
  local selected_name="${automation_names[$((selected_index-1))]}"
  local selected_id="${automation_ids[$((selected_index-1))]}"
  
  echo ""
  echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é: ${BOLD}$selected_name${NC}"
  echo ""
  echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!${NC}"
  echo -n -e "${GREEN}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ${NC}"
  read confirm
  
  if [[ ! "$confirm" =~ ^[yY]$ ]]; then
    echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.${NC}"
    sleep 1
    return 1
  fi
  
  echo ""
  echo -e "${CYAN}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$selected_name'...${NC}"
  
  # –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
  while IFS='|' read -r id name repo path branch commands date is_private encrypted_creds; do
    if [ "$id" = "$selected_id" ]; then
      log_event "INFO" "üß™ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$name' (ID: $id)"
      
      # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      local final_commands="$commands"
      if [ "$is_private" = "yes" ] && [ ! -z "$encrypted_creds" ]; then
        log_event "DEBUG" "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        log_event "DEBUG" "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): $(echo "$encrypted_creds" | head -c 50)..."
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ROT13, –ø–æ—Ç–æ–º base64)
        local decrypted_creds=$(echo "$encrypted_creds" | tr 'A-Za-z' 'N-ZA-Mn-za-m' | base64 -d 2>/dev/null)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if [ -z "$decrypted_creds" ] || [[ "$decrypted_creds" == *$'\0'* ]]; then
          log_event "DEBUG" "–ü–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"
          decrypted_creds=$(echo "$encrypted_creds" | base64 -d 2>/dev/null | tr 'A-Za-z' 'N-ZA-Mn-za-m' 2>/dev/null)
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if [ ! -z "$decrypted_creds" ]; then
          log_event "DEBUG" "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤): $(echo "$decrypted_creds" | head -c 20)..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          if [[ "$decrypted_creds" =~ ^[a-zA-Z0-9_-]+:ghp_[a-zA-Z0-9_-]+$ ]]; then
            log_event "DEBUG" "‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã (–¥–ª–∏–Ω–∞: $(echo "$decrypted_creds" | wc -c) —Å–∏–º–≤–æ–ª–æ–≤)"
          else
            log_event "ERROR" "‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            log_event "DEBUG" "–î–∞–Ω–Ω—ã–µ: '$decrypted_creds'"
            decrypted_creds=""  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          fi
        fi
        
        if [ ! -z "$decrypted_creds" ]; then
          # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (—Ö–∞—Ä–¥–∫–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
          local auth_url="https://$decrypted_creds@github.com/KUZKO-LTD/tg-manager.git"
          log_event "DEBUG" "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π auth URL: $auth_url"
          
          # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ URL –≤ –∫–æ–º–∞–Ω–¥–∞—Ö, —É–±–∏—Ä–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
          final_commands=$(echo "$commands" | sed -E "s|https://[^[:space:]'\"]+|$auth_url|g")
          
          # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã set-url, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
          if [[ "$final_commands" != *"git remote set-url origin"* ]]; then
            final_commands=$(echo "$commands" | sed "s|git pull origin|git remote set-url origin '$auth_url' \&\& git pull origin|g")
          fi
          log_event "DEBUG" "üîß –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        else
          log_event "ERROR" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
          # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          final_commands=$(echo "$commands" | sed -E "s|https://[^[:space:]'\"]+|https://github.com/KUZKO-LTD/tg-manager.git|g")
        fi
      else
        log_event "DEBUG" "üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)"
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        final_commands=$(echo "$commands" | sed -E "s|https://[^[:space:]'\"]+|https://github.com/KUZKO-LTD/tg-manager.git|g")
      fi
      
      # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
      log_event "INFO" "=== –¢–ï–°–¢–û–í–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò '$name' ==="
      log_event "INFO" "–ö–æ–º–∞–Ω–¥—ã: $final_commands"
      
      # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
      local temp_output=$(mktemp)
      
      echo -e "${CYAN}–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã...${NC}"
      
      # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      (
        set -e
        cd /
        
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] –¢–ï–°–¢–û–í–´–ô –°–¢–ê–†–¢: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$name'"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] –ö–û–ú–ê–ù–î–´: $final_commands"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ---"
        
        eval "$final_commands" 2>&1
        
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ---"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] –¢–ï–°–¢–û–í–´–ô –§–ò–ù–ò–®: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è '$name' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
      ) > "$temp_output" 2>&1
      
      local exit_code=$?
      
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      echo ""
      echo -e "${YELLOW}--- –í–´–í–û–î –ö–û–ú–ê–ù–î ---${NC}"
      cat "$temp_output"
      echo -e "${YELLOW}--- –ö–û–ù–ï–¶ –í–´–í–û–î–ê ---${NC}"
      echo ""
      
      # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
      cat "$temp_output" >> "$WEBHOOK_LOG"
      
      # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if [ $exit_code -eq 0 ]; then
        log_event "SUCCESS" "‚úÖ –¢–ï–°–¢–û–í–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$name' –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (exit code: 0)"
        echo -e "${GREEN}‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
      else
        log_event "ERROR" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¢–ï–°–¢–û–í–û–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$name' (exit code: $exit_code)"
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏! (exit code: $exit_code)${NC}"
      fi
      
      # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      rm -f "$temp_output"
      
      log_event "INFO" "=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø '$name' ==="
      
      break
    fi
  done < "$AUTOMATIONS_FILE"
  
  echo ""
  echo -n -e "${GREEN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
  read
}

# –≠–º—É–ª—è—Ü–∏—è push —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
simulate_push_event() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}         –≠–ú–£–õ–Ø–¶–ò–Ø PUSH –°–û–ë–´–¢–ò–Ø              ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  if [ ! -f "$AUTOMATIONS_FILE" ] || [ ! -s "$AUTOMATIONS_FILE" ]; then
    echo -e "${RED}–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.${NC}"
    sleep 2
    return 1
  fi
  
  echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:${NC}"
  echo ""
  
  local automation_count=0
  local automation_repos=()
  local automation_branches=()
  local automation_names=()
  
  while IFS='|' read -r id name repo path branch commands date is_private encrypted_creds; do
    if [ ! -z "$id" ] && [ ! -z "$name" ]; then
      ((automation_count++))
      automation_names+=("$name")
      automation_repos+=("$repo")
      automation_branches+=("$branch")
      echo -e "${CYAN}$automation_count.${NC} $name - $(basename "$repo" .git) (–≤–µ—Ç–∫–∞: $branch)"
    fi
  done < "$AUTOMATIONS_FILE"
  
  if [ "$automation_count" -eq 0 ]; then
    echo -e "${RED}–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.${NC}"
    sleep 2
    return 1
  fi
  
  echo ""
  echo -n -e "${GREEN}–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ push (1-$automation_count): ${NC}"
  read selected_index
  
  if ! [[ "$selected_index" =~ ^[0-9]+$ ]] || [ "$selected_index" -lt 1 ] || [ "$selected_index" -gt "$automation_count" ]; then
    echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.${NC}"
    sleep 2
    return 1
  fi
  
  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é (–∏–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0)
  local selected_name="${automation_names[$((selected_index-1))]}"
  local selected_repo="${automation_repos[$((selected_index-1))]}"
  local selected_branch="${automation_branches[$((selected_index-1))]}"
  
  echo ""
  echo -e "${YELLOW}–≠–º—É–ª–∏—Ä—É–µ–º push –¥–ª—è:${NC}"
  echo -e "  –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: ${BOLD}$selected_name${NC}"
  echo -e "  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${BOLD}$(basename "$selected_repo" .git)${NC}"
  echo -e "  –í–µ—Ç–∫–∞: ${BOLD}$selected_branch${NC}"
  echo ""
  echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!${NC}"
  echo -n -e "${GREEN}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ${NC}"
  read confirm
  
  if [[ ! "$confirm" =~ ^[yY]$ ]]; then
    echo -e "${YELLOW}–≠–º—É–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.${NC}"
    sleep 1
    return 1
  fi
  
  echo ""
  echo -e "${CYAN}üöÄ –°–æ–∑–¥–∞–µ–º —ç–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ push —Å–æ–±—ã—Ç–∏–µ...${NC}"
  
  # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π payload –¥–ª—è push —Å–æ–±—ã—Ç–∏—è
  local repo_name=$(basename "$selected_repo" .git)
  local push_payload="{
  \"ref\": \"refs/heads/$selected_branch\",
  \"repository\": {
    \"name\": \"$repo_name\",
    \"clone_url\": \"$selected_repo\"
  },
  \"pusher\": {
    \"name\": \"test-automation\"
  },
  \"head_commit\": {
    \"message\": \"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\"
  }
}"
  
  log_event "INFO" "üß™ –≠–ú–£–õ–Ø–¶–ò–Ø PUSH –°–û–ë–´–¢–ò–Ø –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ '$selected_name'"
  log_event "DEBUG" "–≠–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload: $push_payload"
  
  echo -e "${CYAN}–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ push —Å–æ–±—ã—Ç–∏–µ...${NC}"
  
  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ push —Å–æ–±—ã—Ç–∏—è
  handle_push_event "$push_payload"
  
  echo ""
  echo -e "${GREEN}‚úÖ –≠–º—É–ª—è—Ü–∏—è push —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.${NC}"
  echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.${NC}"
  echo ""
  echo -n -e "${GREEN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
  read
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}            –ñ–£–†–ù–ê–õ –°–û–ë–´–¢–ò–ô                   ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  if [ ! -f "$WEBHOOK_LOG" ] || [ ! -s "$WEBHOOK_LOG" ]; then
    echo -e "${RED}–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.${NC}"
    sleep 2
    return 1
  fi
  
  echo -e "${YELLOW}–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo ""
  
  tail -n 50 "$WEBHOOK_LOG"
  
  echo ""
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo -e "${YELLOW}–û–ø—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂—É—Ä–Ω–∞–ª–∞:${NC}"
  echo -e "${CYAN}1.${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π –∂—É—Ä–Ω–∞–ª"
  echo -e "${CYAN}2.${NC} –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª"
  echo -e "${CYAN}3.${NC} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
  echo ""
  echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-3): ${NC}"
  read log_option
  
  case $log_option in
    1)
      less "$WEBHOOK_LOG"
      ;;
    2)
      echo -e "${RED}${BOLD}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª? (y/n): ${NC}"
      read confirm_clear
      
      if [[ "$confirm_clear" == "y" || "$confirm_clear" == "Y" ]]; then
        > "$WEBHOOK_LOG"
        echo -e "${GREEN}–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω.${NC}"
        log_event "INFO" "–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω"
        sleep 1
      fi
      ;;
  esac
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
manage_settings() {
  while true; do
    clear_screen
    echo -e "${BOLD}${CYAN}==============================================${NC}"
    echo -e "${BOLD}${CYAN}             –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´               ${NC}"
    echo -e "${BOLD}${CYAN}==============================================${NC}"
    echo ""
    
    echo -e "${YELLOW}–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:${NC}"
    echo -e "${YELLOW}---------------------------------------------${NC}"
    echo -e "${BOLD}–ü–æ—Ä—Ç webhook:${NC} $WEBHOOK_PORT"
    echo -e "${BOLD}Webhook secret:${NC} ${WEBHOOK_SECRET:-'–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
    echo -e "${BOLD}–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:${NC} ${NOTIFICATIONS_ENABLED}"
    echo -e "${BOLD}Telegram —Ç–æ–∫–µ–Ω:${NC} ${TELEGRAM_TOKEN:0:10}...${TELEGRAM_TOKEN:(-5)}"
    echo -e "${BOLD}Telegram Chat ID:${NC} ${TELEGRAM_CHAT_ID:-'–ù–µ —É–∫–∞–∑–∞–Ω'}"
    echo -e "${YELLOW}---------------------------------------------${NC}"
    echo ""
    
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:${NC}"
    echo -e "${CYAN}1.${NC} –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç webhook"
    echo -e "${CYAN}2.${NC} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook secret"
    echo -e "${CYAN}3.${NC} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    echo -e "${CYAN}4.${NC} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    echo ""
    echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-4): ${NC}"
    read settings_choice
    
    case $settings_choice in
      1)
        echo ""
        echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç webhook (—Ç–µ–∫—É—â–∏–π: $WEBHOOK_PORT): ${NC}"
        read new_port
        
        if [[ "$new_port" =~ ^[0-9]+$ ]] && [ "$new_port" -ge 1024 ] && [ "$new_port" -le 65535 ]; then
          WEBHOOK_PORT="$new_port"
          save_config
          echo -e "${GREEN}–ü–æ—Ä—Ç webhook –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $WEBHOOK_PORT.${NC}"
        else
          echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1024 –¥–æ 65535.${NC}"
        fi
        sleep 2
        ;;
      2)
        echo ""
        echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ webhook secret: ${NC}"
        read -s new_secret
        echo ""
        
        WEBHOOK_SECRET="$new_secret"
        save_config
        echo -e "${GREEN}Webhook secret —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
        sleep 2
        ;;
      3)
        manage_notification_settings
        ;;
      4)
        return 0
        ;;
      *)
        echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
        sleep 1
        ;;
    esac
  done
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
manage_notification_settings() {
  while true; do
    clear_screen
    echo -e "${BOLD}${CYAN}==============================================${NC}"
    echo -e "${BOLD}${CYAN}          –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô              ${NC}"
    echo -e "${BOLD}${CYAN}==============================================${NC}"
    echo ""
    
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo -e "${CYAN}1.${NC} –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    echo -e "${CYAN}2.${NC} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram —Ç–æ–∫–µ–Ω"
    echo -e "${CYAN}3.${NC} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram Chat ID"
    echo -e "${CYAN}4.${NC} –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    echo -e "${CYAN}5.${NC} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    echo ""
    echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-5): ${NC}"
    read notif_choice
    
    case $notif_choice in
      1)
        if [ "$NOTIFICATIONS_ENABLED" == "true" ]; then
          NOTIFICATIONS_ENABLED="false"
          echo -e "${YELLOW}–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.${NC}"
        else
          NOTIFICATIONS_ENABLED="true"
          echo -e "${GREEN}–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.${NC}"
        fi
        save_config
        sleep 2
        ;;
      2)
        echo ""
        echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ Telegram —Ç–æ–∫–µ–Ω: ${NC}"
        read new_token
        
        TELEGRAM_TOKEN="$new_token"
        save_config
        echo -e "${GREEN}Telegram —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω.${NC}"
        sleep 2
        ;;
      3)
        echo ""
        echo -n -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID: ${NC}"
        read new_chat_id
        
        TELEGRAM_CHAT_ID="$new_chat_id"
        save_config
        echo -e "${GREEN}Telegram Chat ID –æ–±–Ω–æ–≤–ª–µ–Ω.${NC}"
        sleep 2
        ;;
      4)
        echo -e "${YELLOW}–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...${NC}"
        send_notification "INFO" "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã webhook –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
        echo -e "${GREEN}–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.${NC}"
        sleep 2
        ;;
      5)
        return 0
        ;;
      *)
        echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
        sleep 1
        ;;
    esac
  done
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
save_config() {
  cat > "$CONFIG_FILE" << EOF
WEBHOOK_PORT=$WEBHOOK_PORT
WEBHOOK_SECRET=$WEBHOOK_SECRET
NOTIFICATIONS_ENABLED=$NOTIFICATIONS_ENABLED
TELEGRAM_TOKEN=$TELEGRAM_TOKEN
TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID
DEFAULT_BRANCH=$DEFAULT_BRANCH
EOF
}

# –û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
clean_corrupted_data() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}      –û–ß–ò–°–¢–ö–ê –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–• –î–ê–ù–ù–´–•           ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  if [ ! -f "$AUTOMATIONS_FILE" ] || [ ! -s "$AUTOMATIONS_FILE" ]; then
    echo -e "${YELLOW}–§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.${NC}"
    sleep 2
    return 0
  fi
  
  echo -e "${YELLOW}–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π...${NC}"
  echo ""
  
  local total_lines=0
  local corrupted_lines=0
  local valid_lines=0
  
  while IFS= read -r line; do
    ((total_lines++))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
    local field_count=$(echo "$line" | tr '|' '\n' | wc -l)
    
    if [ "$field_count" -lt 6 ]; then
      echo -e "${RED}‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å #${total_lines}: ${line::80}...${NC}"
      ((corrupted_lines++))
    else
      ((valid_lines++))
    fi
  done < "$AUTOMATIONS_FILE"
  
  echo ""
  echo -e "${YELLOW}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo -e "${BOLD}–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:${NC} $total_lines"
  echo -e "${BOLD}–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:${NC} ${GREEN}$valid_lines${NC}"
  echo -e "${BOLD}–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:${NC} ${RED}$corrupted_lines${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  
  if [ "$corrupted_lines" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!${NC}"
    sleep 2
    return 0
  fi
  
  echo ""
  echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
  echo -e "${CYAN}1.${NC} –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"
  echo -e "${CYAN}2.${NC} –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π"
  echo -e "${CYAN}3.${NC} –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –æ—á–∏—Å—Ç–∏—Ç—å"
  echo -e "${PURPLE}4.${NC} üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL"
  echo -e "${CYAN}5.${NC} –û—Ç–º–µ–Ω–∞"
  echo ""
  echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-5): ${NC}"
  read clean_choice
  
  case $clean_choice in
    1)
      echo -e "${YELLOW}–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...${NC}"
      local temp_file=$(mktemp)
      local removed_count=0
      
      while IFS= read -r line; do
        local field_count=$(echo "$line" | tr '|' '\n' | wc -l)
        
        if [ "$field_count" -ge 6 ]; then
          echo "$line" >> "$temp_file"
        else
          ((removed_count++))
        fi
      done < "$AUTOMATIONS_FILE"
      
      mv "$temp_file" "$AUTOMATIONS_FILE"
      echo -e "${GREEN}‚úÖ –£–¥–∞–ª–µ–Ω–æ $removed_count –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.${NC}"
      log_event "INFO" "–û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–æ $removed_count –∑–∞–ø–∏—Å–µ–π"
      ;;
    2)
      echo -e "${RED}${BOLD}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏? (y/n): ${NC}"
      read confirm_clear_all
      
      if [[ "$confirm_clear_all" == "y" || "$confirm_clear_all" == "Y" ]]; then
        > "$AUTOMATIONS_FILE"
        echo -e "${GREEN}‚úÖ –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã.${NC}"
        log_event "INFO" "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π"
      else
        echo -e "${YELLOW}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.${NC}"
      fi
      ;;
    3)
      local backup_file="${AUTOMATIONS_FILE}.backup.$(date +%s)"
      cp "$AUTOMATIONS_FILE" "$backup_file"
      > "$AUTOMATIONS_FILE"
      echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backup_file${NC}"
      echo -e "${GREEN}‚úÖ –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –æ—á–∏—â–µ–Ω.${NC}"
      log_event "INFO" "–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∏ –æ—á–∏—â–µ–Ω —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π"
      ;;
    4)
      repair_automation_urls
      ;;
    5)
      echo -e "${YELLOW}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.${NC}"
      ;;
    *)
      echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
      ;;
  esac
  
  sleep 2
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_main_menu() {
  while true; do
    clear_screen
    echo -e "${BOLD}${CYAN}==============================================${NC}"
    echo -e "${BOLD}${CYAN}          WEBHOOK –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø              ${NC}"
    echo -e "${BOLD}${CYAN}==============================================${NC}"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook —Å–µ—Ä–≤–µ—Ä–∞
    local server_status=""
    local server_type=""
    
    if pgrep -f "python3.*webhook_server.*${WEBHOOK_PORT}" > /dev/null; then
      server_status="${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
      server_type=" (Python)"
    elif pgrep -f "socat.*${WEBHOOK_PORT}" > /dev/null; then
      server_status="${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
      server_type=" (Socat)"
    elif pgrep -f "nc.*${WEBHOOK_PORT}\|webhook-server" > /dev/null; then
      server_status="${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
      server_type=" (Netcat)"
    else
      server_status="${RED}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
      server_type=""
    fi
    
    echo -e "${YELLOW}–°—Ç–∞—Ç—É—Å webhook —Å–µ—Ä–≤–µ—Ä–∞: $server_status$server_type${NC}"
    echo -e "${YELLOW}---------------------------------------------${NC}"
    echo ""
    
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo -e "${CYAN}1.${NC} –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"
    echo -e "${CYAN}2.${NC} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è–º–∏"
    echo -e "${CYAN}3.${NC} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–æ–º"
    echo -e "${CYAN}4.${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π"
    echo -e "${CYAN}5.${NC} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
    echo -e "${CYAN}6.${NC} –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    echo -e "${PURPLE}7.${NC} üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"
    echo -e "${PURPLE}8.${NC} üöÄ –≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å push —Å–æ–±—ã—Ç–∏–µ"
    echo -e "${CYAN}9.${NC} –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"
    echo ""
    echo -e "${YELLOW}---------------------------------------------${NC}"
    echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-9): ${NC}"
    read main_choice
    
    case $main_choice in
      1)
        create_automation
        ;;
      2)
        manage_automations
        ;;
      3)
        start_webhook_server
        ;;
      4)
        view_logs
        ;;
      5)
        system_settings
        ;;
      6)
        clean_corrupted_data
        ;;
      7)
        test_automation_manual
        ;;
      8)
        simulate_push_event
        ;;
      9)
        clear_screen
        echo -e "${GREEN}${BOLD}–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
        return 0
        ;;
      *)
        echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
        sleep 1
        ;;
    esac
    
    if [ "$main_choice" != "9" ]; then
      echo ""
      echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...${NC}"
      read
    fi
  done
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
system_settings() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}         –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´                   ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
  echo -e "${CYAN}1.${NC} –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç webhook —Å–µ—Ä–≤–µ—Ä–∞"
  echo -e "${CYAN}2.${NC} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
  echo -e "${CYAN}3.${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
  echo -e "${CYAN}4.${NC} –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π"
  echo -e "${CYAN}5.${NC} –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
  echo ""
  echo -n -e "${GREEN}–í–∞—à –≤—ã–±–æ—Ä (1-5): ${NC}"
  read settings_choice
  
  case $settings_choice in
    1)
      change_webhook_port
      ;;
    2)
      configure_telegram
      ;;
    3)
      show_configuration
      ;;
    4)
      debug_automations_data
      ;;
    5)
      return
      ;;
    *)
      echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
      sleep 1
      system_settings
      ;;
  esac
}

# –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π
debug_automations_data() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}    –û–¢–õ–ê–î–ö–ê –î–ê–ù–ù–´–• –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ô             ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  if [ ! -f "$AUTOMATIONS_FILE" ]; then
    echo -e "${RED}‚ùå –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: $AUTOMATIONS_FILE${NC}"
    echo ""
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...${NC}"
    read
    return
  fi
  
  echo -e "${YELLOW}–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${GREEN}$AUTOMATIONS_FILE${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  
  local total_lines=0
  local lines_with_credentials=0
  
  while IFS= read -r line; do
    if [ -z "$line" ]; then
      continue
    fi
    
    ((total_lines++))
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
    local IFS='|'
    read -ra fields <<< "$line"
    
    local id="${fields[0]:-}"
    local name="${fields[1]:-}"
    local repo="${fields[2]:-}"
    local path="${fields[3]:-}"
    local branch="${fields[4]:-}"
    local commands="${fields[5]:-}"
    local date="${fields[6]:-}"
    local is_private="${fields[7]:-}"
    local encrypted_creds="${fields[8]:-}"
    
    echo ""
    echo -e "${CYAN}–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è #$total_lines:${NC}"
    echo -e "  ${YELLOW}ID:${NC} $id"
    echo -e "  ${YELLOW}–ù–∞–∑–≤–∞–Ω–∏–µ:${NC} $name"
    echo -e "  ${YELLOW}–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:${NC} $repo"
    echo -e "  ${YELLOW}–ü—É—Ç—å:${NC} $path"
    echo -e "  ${YELLOW}–í–µ—Ç–∫–∞:${NC} $branch"
    echo -e "  ${YELLOW}–°–æ–∑–¥–∞–Ω–æ:${NC} $date"
    echo -e "  ${YELLOW}–ü—Ä–∏–≤–∞—Ç–Ω—ã–π:${NC} ${is_private:-'–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
    
    if [ ! -z "$encrypted_creds" ]; then
      ((lines_with_credentials++))
      echo -e "  ${YELLOW}–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:${NC} ${GREEN}‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${#encrypted_creds} —Å–∏–º–≤–æ–ª–æ–≤)${NC}"
      
      # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      local decrypted=$(echo "$encrypted_creds" | tr 'A-Za-z' 'N-ZA-Mn-za-m' | base64 -d 2>/dev/null)
      if [ ! -z "$decrypted" ] && [[ "$decrypted" == *":"* ]]; then
        echo -e "  ${YELLOW}–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:${NC} ${GREEN}‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è${NC}"
      else
        echo -e "  ${YELLOW}–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:${NC} ${RED}‚ùå –û—à–∏–±–∫–∞${NC}"
      fi
    else
      if [ "$is_private" = "yes" ]; then
        echo -e "  ${YELLOW}–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:${NC} ${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π!)${NC}"
      else
        echo -e "  ${YELLOW}–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:${NC} ${GRAY}–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è (–ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)${NC}"
      fi
    fi
    
    echo -e "  ${YELLOW}–ü–æ–ª—è –≤—Å–µ–≥–æ:${NC} ${#fields[@]}"
    
  done < "$AUTOMATIONS_FILE"
  
  echo ""
  echo -e "${YELLOW}==============================================${NC}"
  echo -e "${BOLD}–ò—Ç–æ–≥–∏:${NC}"
  echo -e "  ${YELLOW}–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π:${NC} $total_lines"
  echo -e "  ${YELLOW}–° —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:${NC} $lines_with_credentials"
  echo -e "  ${YELLOW}–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:${NC} $(wc -c < "$AUTOMATIONS_FILE" 2>/dev/null || echo 0) –±–∞–π—Ç"
  
  echo ""
  echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...${NC}"
  read
}

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
change_webhook_port() {
  echo -e "${YELLOW}–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –ø–æ—Ä—Ç–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.${NC}"
  sleep 2
}

configure_telegram() {
  echo -e "${YELLOW}–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.${NC}"
  sleep 2
}

show_configuration() {
  clear_screen
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo -e "${BOLD}${CYAN}         –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´                ${NC}"
  echo -e "${BOLD}${CYAN}==============================================${NC}"
  echo ""
  
  echo -e "${YELLOW}–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:${NC}"
  echo -e "${YELLOW}---------------------------------------------${NC}"
  echo -e "${BOLD}Webhook –ø–æ—Ä—Ç:${NC} $WEBHOOK_PORT"
  echo -e "${BOLD}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö:${NC} $WEBHOOK_DATA_DIR"
  echo -e "${BOLD}–§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π:${NC} $AUTOMATIONS_FILE"
  echo -e "${BOLD}–§–∞–π–ª –ª–æ–≥–æ–≤:${NC} $WEBHOOK_LOG"
  echo -e "${BOLD}–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:${NC} ${NOTIFICATIONS_ENABLED:-'–æ—Ç–∫–ª—é—á–µ–Ω—ã'}"
  echo -e "${BOLD}Telegram —á–∞—Ç:${NC} ${TELEGRAM_CHAT_ID:-'–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"
  
  echo ""
  echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...${NC}"
  read
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  export WEBHOOK_SCRIPT_PATH="$0"
  
  # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ curl | bash, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
  if [[ "$0" == "/dev/fd/"* ]] || [[ "$0" == "/proc/"* ]] || [[ "$0" == "bash" ]]; then
    local temp_script="/tmp/webhook_$(date +%s).sh"
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–µ–±—è –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –≤—ã–∑–æ–≤–æ–≤
    cp "$0" "$temp_script" 2>/dev/null || {
      # –ï—Å–ª–∏ cp –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ
      curl -sSL "https://raw.githubusercontent.com/darkClaw921/services-create-curl/master/webhook.sh" > "$temp_script" 2>/dev/null || {
        echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è standalone —Ä–∞–±–æ—Ç—ã"
        exit 1
      }
    }
    
    chmod +x "$temp_script"
    export WEBHOOK_SCRIPT_PATH="$temp_script"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
    if [[ "${1:-}" != "restarted" ]]; then
      exec "$temp_script" restarted "${@:2}"
    fi
  fi
  
  check_sudo
  init_webhook_system
  
  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  if [[ "${1:-}" == "restarted" ]]; then
    # –£–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç restarted –∏ —Å–¥–≤–∏–≥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    shift
  fi
  
  case "${1:-}" in
    "handle_webhook_request")
      handle_webhook_request "$2"
      exit 0
      ;;
    "webhook_server")
      webhook_server
      exit 0
      ;;
    *)
      show_main_menu
      ;;
  esac
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 